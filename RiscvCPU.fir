FIRRTL version 1.2.0
circuit RiscvCPU :
  module Alu :
    input clock : Clock
    input reset : Reset
    output io : { flip input1 : UInt<32>, flip input2 : UInt<32>, flip func3 : UInt<3>, out : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 20:14]

    io.out <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 26:10]
    node _T = eq(UInt<1>("h0"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:20]
    when _T : @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:20]
      node _io_out_T = add(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:36]
      node _io_out_T_1 = tail(_io_out_T, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:36]
      io.out <= _io_out_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:23]
    else :
      node _T_1 = eq(UInt<3>("h7"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:20]
      when _T_1 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:20]
        node _io_out_T_2 = and(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 29:36]
        io.out <= _io_out_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 29:23]
      else :
        node _T_2 = eq(UInt<3>("h6"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:20]
        when _T_2 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:20]
          node _io_out_T_3 = xor(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 30:36]
          io.out <= _io_out_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 30:23]
        else :
          node _T_3 = eq(UInt<3>("h4"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:20]
          when _T_3 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:20]
            node _io_out_T_4 = or(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 31:36]
            io.out <= _io_out_T_4 @[\\src\\main\\scala\\gcd\\rv_alu.scala 31:23]


  module RegisterBank :
    input clock : Clock
    input reset : Reset
    output io : { flip din : UInt<32>, flip rsd : UInt<5>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, outrs1 : UInt<32>, outrs2 : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 121:14]

    cmem mem1 : UInt<32> [32] @[\\src\\main\\scala\\gcd\\rv_alu.scala 144:17]
    cmem mem2 : UInt<32> [32] @[\\src\\main\\scala\\gcd\\rv_alu.scala 145:17]
    node rsdzero = eq(io.rsd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 147:24]
    node _T = eq(rsdzero, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 149:8]
    when _T : @[\\src\\main\\scala\\gcd\\rv_alu.scala 149:18]
      infer mport MPORT = mem1[io.rsd], clock @[\\src\\main\\scala\\gcd\\rv_alu.scala 150:9]
      MPORT <= io.din @[\\src\\main\\scala\\gcd\\rv_alu.scala 150:18]
      infer mport MPORT_1 = mem2[io.rsd], clock @[\\src\\main\\scala\\gcd\\rv_alu.scala 151:9]
      MPORT_1 <= io.din @[\\src\\main\\scala\\gcd\\rv_alu.scala 151:18]
    infer mport io_outrs1_MPORT = mem1[io.rs1], clock @[\\src\\main\\scala\\gcd\\rv_alu.scala 154:20]
    io.outrs1 <= io_outrs1_MPORT @[\\src\\main\\scala\\gcd\\rv_alu.scala 154:13]
    infer mport io_outrs2_MPORT = mem2[io.rs2], clock @[\\src\\main\\scala\\gcd\\rv_alu.scala 155:20]
    io.outrs2 <= io_outrs2_MPORT @[\\src\\main\\scala\\gcd\\rv_alu.scala 155:13]

  module RiscvCPU :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip mIn : UInt<32>, mWrite : UInt<1>, mMask : UInt<1>[4], mOut : UInt<32>, mAddr : UInt<10>, halted : UInt<1>, db_r1 : UInt<32>, db_r2 : UInt<32>, db_pc : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 175:14]

    inst alu of Alu @[\\src\\main\\scala\\gcd\\rv_alu.scala 187:19]
    alu.clock <= clock
    alu.reset <= reset
    inst regs of RegisterBank @[\\src\\main\\scala\\gcd\\rv_alu.scala 188:20]
    regs.clock <= clock
    regs.reset <= reset
    reg PC : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 190:19]
    node _PC4_T = add(PC, UInt<3>("h4")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 192:16]
    node PC4 = tail(_PC4_T, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 192:16]
    reg state_start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 194:29]
    reg state_fetch : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 195:29]
    reg state_fetch2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 196:29]
    reg state_decode : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 197:29]
    reg state_exec : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 198:27]
    reg state_halt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 199:27]
    reg rd : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 202:19]
    reg rs1 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 203:19]
    reg rs2 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 204:20]
    reg savedOp : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 205:24]
    reg immv : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 206:21]
    reg aluOP : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 207:22]
    reg din_is_alu : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 208:27]
    reg din_is_mem : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 209:27]
    reg alu2_use_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 210:29]
    reg branchEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 212:29]
    reg writeEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 213:28]
    wire lui_mix : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 215:21]
    wire must_halt : UInt<1> @[\\src\\main\\scala\\gcd\\rv_alu.scala 216:23]
    wire branch_target : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 217:27]
    wire instruction : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 219:25]
    node _instruction_T = mux(state_decode, io.mIn, savedOp) @[\\src\\main\\scala\\gcd\\rv_alu.scala 220:21]
    instruction <= _instruction_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 220:15]
    reg memoryShift : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 222:28]
    wire shiftedMem : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 223:24]
    wire inst : { rest : UInt<25>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 226:36]
    wire _inst_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 226:36]
    _inst_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_alu.scala 226:36]
    node _inst_T = bits(_inst_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 226:36]
    inst.opcode <= _inst_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 226:36]
    node _inst_T_1 = bits(_inst_WIRE, 31, 7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 226:36]
    inst.rest <= _inst_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 226:36]
    wire inst_I : { imm : UInt<12>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    wire _inst_I_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    _inst_I_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    node _inst_I_T = bits(_inst_I_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    inst_I.opcode <= _inst_I_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    node _inst_I_T_1 = bits(_inst_I_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    inst_I.rd <= _inst_I_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    node _inst_I_T_2 = bits(_inst_I_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    inst_I.func3 <= _inst_I_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    node _inst_I_T_3 = bits(_inst_I_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    inst_I.rs1 <= _inst_I_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    node _inst_I_T_4 = bits(_inst_I_WIRE, 31, 20) @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    inst_I.imm <= _inst_I_T_4 @[\\src\\main\\scala\\gcd\\rv_alu.scala 227:36]
    wire inst_R : { func7 : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    wire _inst_R_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    _inst_R_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    node _inst_R_T = bits(_inst_R_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    inst_R.opcode <= _inst_R_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    node _inst_R_T_1 = bits(_inst_R_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    inst_R.rd <= _inst_R_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    node _inst_R_T_2 = bits(_inst_R_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    inst_R.func3 <= _inst_R_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    node _inst_R_T_3 = bits(_inst_R_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    inst_R.rs1 <= _inst_R_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    node _inst_R_T_4 = bits(_inst_R_WIRE, 24, 20) @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    inst_R.rs2 <= _inst_R_T_4 @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    node _inst_R_T_5 = bits(_inst_R_WIRE, 31, 25) @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    inst_R.func7 <= _inst_R_T_5 @[\\src\\main\\scala\\gcd\\rv_alu.scala 228:36]
    wire inst_U : { imm : UInt<20>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 229:36]
    wire _inst_U_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 229:36]
    _inst_U_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_alu.scala 229:36]
    node _inst_U_T = bits(_inst_U_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 229:36]
    inst_U.opcode <= _inst_U_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 229:36]
    node _inst_U_T_1 = bits(_inst_U_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 229:36]
    inst_U.rd <= _inst_U_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 229:36]
    node _inst_U_T_2 = bits(_inst_U_WIRE, 31, 12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 229:36]
    inst_U.imm <= _inst_U_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 229:36]
    wire inst_B : { imm12 : UInt<1>, imm10_5 : UInt<6>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, im41 : UInt<4>, im11 : UInt<1>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    wire _inst_B_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    _inst_B_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    node _inst_B_T = bits(_inst_B_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    inst_B.opcode <= _inst_B_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    node _inst_B_T_1 = bits(_inst_B_WIRE, 7, 7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    inst_B.im11 <= _inst_B_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    node _inst_B_T_2 = bits(_inst_B_WIRE, 11, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    inst_B.im41 <= _inst_B_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    node _inst_B_T_3 = bits(_inst_B_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    inst_B.func3 <= _inst_B_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    node _inst_B_T_4 = bits(_inst_B_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    inst_B.rs1 <= _inst_B_T_4 @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    node _inst_B_T_5 = bits(_inst_B_WIRE, 24, 20) @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    inst_B.rs2 <= _inst_B_T_5 @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    node _inst_B_T_6 = bits(_inst_B_WIRE, 30, 25) @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    inst_B.imm10_5 <= _inst_B_T_6 @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    node _inst_B_T_7 = bits(_inst_B_WIRE, 31, 31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    inst_B.imm12 <= _inst_B_T_7 @[\\src\\main\\scala\\gcd\\rv_alu.scala 230:36]
    wire inst_J : { im20 : UInt<1>, im10_1 : UInt<10>, im11 : UInt<1>, im19_12 : UInt<8>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    wire _inst_J_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    _inst_J_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    node _inst_J_T = bits(_inst_J_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    inst_J.opcode <= _inst_J_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    node _inst_J_T_1 = bits(_inst_J_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    inst_J.rd <= _inst_J_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    node _inst_J_T_2 = bits(_inst_J_WIRE, 19, 12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    inst_J.im19_12 <= _inst_J_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    node _inst_J_T_3 = bits(_inst_J_WIRE, 20, 20) @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    inst_J.im11 <= _inst_J_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    node _inst_J_T_4 = bits(_inst_J_WIRE, 30, 21) @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    inst_J.im10_1 <= _inst_J_T_4 @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    node _inst_J_T_5 = bits(_inst_J_WIRE, 31, 31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    inst_J.im20 <= _inst_J_T_5 @[\\src\\main\\scala\\gcd\\rv_alu.scala 231:36]
    wire inst_S : { im11_5 : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, im4 : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    wire _inst_S_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    _inst_S_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    node _inst_S_T = bits(_inst_S_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    inst_S.opcode <= _inst_S_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    node _inst_S_T_1 = bits(_inst_S_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    inst_S.im4 <= _inst_S_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    node _inst_S_T_2 = bits(_inst_S_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    inst_S.func3 <= _inst_S_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    node _inst_S_T_3 = bits(_inst_S_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    inst_S.rs1 <= _inst_S_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    node _inst_S_T_4 = bits(_inst_S_WIRE, 24, 20) @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    inst_S.rs2 <= _inst_S_T_4 @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    node _inst_S_T_5 = bits(_inst_S_WIRE, 31, 25) @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    inst_S.im11_5 <= _inst_S_T_5 @[\\src\\main\\scala\\gcd\\rv_alu.scala 232:36]
    wire sign : UInt<1> @[\\src\\main\\scala\\gcd\\rv_alu.scala 237:18]
    node _sign_T = bits(io.mIn, 31, 31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 238:17]
    sign <= _sign_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 238:8]
    wire imm_I : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 240:20]
    node _imm_I_T = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_alu.scala 241:32]
    node _imm_I_T_1 = mux(sign, _imm_I_T, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 241:15]
    node _imm_I_T_2 = cat(_imm_I_T_1, inst_I.imm) @[\\src\\main\\scala\\gcd\\rv_alu.scala 241:52]
    imm_I <= _imm_I_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 241:9]
    wire imm_B : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 243:20]
    node _imm_B_T = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_alu.scala 244:32]
    node _imm_B_T_1 = mux(sign, _imm_B_T, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 244:15]
    node _imm_B_T_2 = cat(inst_B.im11, inst_B.imm10_5) @[\\src\\main\\scala\\gcd\\rv_alu.scala 244:68]
    node _imm_B_T_3 = cat(_imm_B_T_2, inst_B.im41) @[\\src\\main\\scala\\gcd\\rv_alu.scala 244:86]
    node _imm_B_T_4 = cat(_imm_B_T_3, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 244:101]
    node _imm_B_T_5 = cat(_imm_B_T_1, _imm_B_T_4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 244:52]
    imm_B <= _imm_B_T_5 @[\\src\\main\\scala\\gcd\\rv_alu.scala 244:9]
    wire imm_U : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 246:20]
    node _imm_U_T = cat(inst_U.imm, UInt<12>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 247:23]
    imm_U <= _imm_U_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 247:9]
    wire imm_J : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 249:20]
    node _imm_J_T = bits(io.mIn, 31, 31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:22]
    node _imm_J_T_1 = asUInt(asSInt(UInt<12>("hfff"))) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:39]
    node _imm_J_T_2 = mux(_imm_J_T, _imm_J_T_1, UInt<12>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:15]
    node _imm_J_T_3 = bits(io.mIn, 19, 12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:67]
    node _imm_J_T_4 = cat(_imm_J_T_2, _imm_J_T_3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:58]
    node _imm_J_T_5 = bits(io.mIn, 20, 20) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:84]
    node _imm_J_T_6 = cat(_imm_J_T_4, _imm_J_T_5) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:75]
    node _imm_J_T_7 = bits(io.mIn, 30, 25) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:98]
    node _imm_J_T_8 = cat(_imm_J_T_6, _imm_J_T_7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:89]
    node _imm_J_T_9 = bits(io.mIn, 24, 21) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:115]
    node _imm_J_T_10 = cat(_imm_J_T_8, _imm_J_T_9) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:106]
    node _imm_J_T_11 = cat(_imm_J_T_10, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:123]
    imm_J <= _imm_J_T_11 @[\\src\\main\\scala\\gcd\\rv_alu.scala 251:9]
    wire imm_S : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 254:20]
    node _imm_S_T = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_alu.scala 255:32]
    node _imm_S_T_1 = mux(sign, _imm_S_T, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 255:15]
    node _imm_S_T_2 = cat(_imm_S_T_1, inst_S.im11_5) @[\\src\\main\\scala\\gcd\\rv_alu.scala 255:52]
    node _imm_S_T_3 = cat(_imm_S_T_2, inst_S.im4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 255:69]
    imm_S <= _imm_S_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 255:9]
    wire _op_WIRE : UInt<7> @[\\src\\main\\scala\\gcd\\rv_alu.scala 256:18]
    _op_WIRE <= inst.opcode @[\\src\\main\\scala\\gcd\\rv_alu.scala 256:18]
    wire op : UInt<7> @[\\src\\main\\scala\\gcd\\rv_alu.scala 256:18]
    op <= _op_WIRE @[\\src\\main\\scala\\gcd\\rv_alu.scala 256:18]
    state_start <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 258:15]
    node _state_fetch_T = or(state_exec, state_start) @[\\src\\main\\scala\\gcd\\rv_alu.scala 259:30]
    state_fetch <= _state_fetch_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 259:15]
    state_decode <= state_fetch @[\\src\\main\\scala\\gcd\\rv_alu.scala 261:16]
    node _state_exec_T = mux(must_halt, UInt<1>("h0"), state_decode) @[\\src\\main\\scala\\gcd\\rv_alu.scala 262:21]
    state_exec <= _state_exec_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 262:14]
    node _state_halt_T = or(must_halt, state_halt) @[\\src\\main\\scala\\gcd\\rv_alu.scala 263:26]
    state_halt <= _state_halt_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 263:14]
    io.halted <= state_halt @[\\src\\main\\scala\\gcd\\rv_alu.scala 265:13]
    node _io_mWrite_T = and(state_exec, writeEnable) @[\\src\\main\\scala\\gcd\\rv_alu.scala 266:27]
    io.mWrite <= _io_mWrite_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 266:13]
    node _io_mAddr_T = or(state_fetch, state_start) @[\\src\\main\\scala\\gcd\\rv_alu.scala 268:31]
    node _io_mAddr_T_1 = mux(_io_mAddr_T, PC, alu.io.out) @[\\src\\main\\scala\\gcd\\rv_alu.scala 268:18]
    io.mAddr <= _io_mAddr_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 268:12]
    io.mOut <= shiftedMem @[\\src\\main\\scala\\gcd\\rv_alu.scala 269:11]
    node _io_mMask_0_T = and(state_exec, writeEnable) @[\\src\\main\\scala\\gcd\\rv_alu.scala 270:29]
    io.mMask[0] <= _io_mMask_0_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 270:15]
    node _io_mMask_1_T = and(state_exec, writeEnable) @[\\src\\main\\scala\\gcd\\rv_alu.scala 271:29]
    io.mMask[1] <= _io_mMask_1_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 271:15]
    node _io_mMask_2_T = and(state_exec, writeEnable) @[\\src\\main\\scala\\gcd\\rv_alu.scala 272:29]
    io.mMask[2] <= _io_mMask_2_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 272:15]
    node _io_mMask_3_T = and(state_exec, writeEnable) @[\\src\\main\\scala\\gcd\\rv_alu.scala 273:29]
    io.mMask[3] <= _io_mMask_3_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 273:15]
    io.halted <= state_halt @[\\src\\main\\scala\\gcd\\rv_alu.scala 274:13]
    io.db_pc <= PC @[\\src\\main\\scala\\gcd\\rv_alu.scala 276:12]
    io.db_r1 <= regs.io.outrs1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 277:12]
    io.db_r2 <= regs.io.outrs2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 278:12]
    alu.io.input1 <= regs.io.outrs1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 280:17]
    node _alu_io_input2_T = mux(alu2_use_reg, regs.io.outrs2, immv) @[\\src\\main\\scala\\gcd\\rv_alu.scala 281:23]
    alu.io.input2 <= _alu_io_input2_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 281:17]
    alu.io.func3 <= aluOP @[\\src\\main\\scala\\gcd\\rv_alu.scala 282:16]
    node _regs_io_din_T = mux(din_is_alu, alu.io.out, lui_mix) @[\\src\\main\\scala\\gcd\\rv_alu.scala 284:21]
    regs.io.din <= _regs_io_din_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 284:15]
    regs.io.rs1 <= rs1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 286:15]
    regs.io.rs2 <= rs2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 287:15]
    node _regs_io_rsd_T = eq(din_is_mem, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 288:37]
    node _regs_io_rsd_T_1 = and(state_exec, _regs_io_rsd_T) @[\\src\\main\\scala\\gcd\\rv_alu.scala 288:35]
    node _regs_io_rsd_T_2 = and(state_fetch, din_is_mem) @[\\src\\main\\scala\\gcd\\rv_alu.scala 288:65]
    node _regs_io_rsd_T_3 = or(_regs_io_rsd_T_1, _regs_io_rsd_T_2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 288:50]
    node _regs_io_rsd_T_4 = mux(_regs_io_rsd_T_3, rd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 288:21]
    regs.io.rsd <= _regs_io_rsd_T_4 @[\\src\\main\\scala\\gcd\\rv_alu.scala 288:15]
    node _lui_mix_T = bits(immv, 31, 12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 290:44]
    node _lui_mix_T_1 = bits(regs.io.outrs1, 11, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 290:69]
    node _lui_mix_T_2 = cat(_lui_mix_T, _lui_mix_T_1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 290:52]
    node _lui_mix_T_3 = mux(din_is_mem, io.mIn, _lui_mix_T_2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 290:17]
    lui_mix <= _lui_mix_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 290:11]
    must_halt <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 291:13]
    node _branch_target_T = add(PC, immv) @[\\src\\main\\scala\\gcd\\rv_alu.scala 295:23]
    node _branch_target_T_1 = tail(_branch_target_T, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 295:23]
    branch_target <= _branch_target_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 295:17]
    node alu_eq = eq(regs.io.outrs1, regs.io.outrs2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 297:31]
    node alu_lt = lt(regs.io.outrs1, regs.io.outrs2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 298:31]
    alu2_use_reg <= alu2_use_reg @[\\src\\main\\scala\\gcd\\rv_alu.scala 300:16]
    shiftedMem is invalid @[\\src\\main\\scala\\gcd\\rv_alu.scala 302:14]
    node _T = eq(UInt<1>("h0"), memoryShift) @[\\src\\main\\scala\\gcd\\rv_alu.scala 303:23]
    when _T : @[\\src\\main\\scala\\gcd\\rv_alu.scala 303:23]
      shiftedMem <= regs.io.outrs2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 305:18]
    else :
      node _T_1 = eq(UInt<1>("h1"), memoryShift) @[\\src\\main\\scala\\gcd\\rv_alu.scala 303:23]
      when _T_1 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 303:23]
        node _shiftedMem_T = shl(regs.io.outrs2, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 308:37]
        node _shiftedMem_T_1 = bits(regs.io.outrs2, 31, 24) @[\\src\\main\\scala\\gcd\\rv_alu.scala 308:60]
        node _shiftedMem_T_2 = cat(_shiftedMem_T, _shiftedMem_T_1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 308:43]
        shiftedMem <= _shiftedMem_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 308:18]
      else :
        node _T_2 = eq(UInt<2>("h2"), memoryShift) @[\\src\\main\\scala\\gcd\\rv_alu.scala 303:23]
        when _T_2 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 303:23]
          node _shiftedMem_T_3 = shl(regs.io.outrs2, 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 311:37]
          node _shiftedMem_T_4 = bits(regs.io.outrs2, 31, 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 311:61]
          node _shiftedMem_T_5 = cat(_shiftedMem_T_3, _shiftedMem_T_4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 311:44]
          shiftedMem <= _shiftedMem_T_5 @[\\src\\main\\scala\\gcd\\rv_alu.scala 311:18]
        else :
          node _T_3 = eq(UInt<2>("h3"), memoryShift) @[\\src\\main\\scala\\gcd\\rv_alu.scala 303:23]
          when _T_3 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 303:23]
            node _shiftedMem_T_6 = shl(regs.io.outrs2, 24) @[\\src\\main\\scala\\gcd\\rv_alu.scala 314:37]
            node _shiftedMem_T_7 = bits(regs.io.outrs2, 31, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 314:61]
            node _shiftedMem_T_8 = cat(_shiftedMem_T_6, _shiftedMem_T_7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 314:44]
            shiftedMem <= _shiftedMem_T_8 @[\\src\\main\\scala\\gcd\\rv_alu.scala 314:18]
    din_is_alu <= din_is_alu @[\\src\\main\\scala\\gcd\\rv_alu.scala 318:14]
    when state_decode : @[\\src\\main\\scala\\gcd\\rv_alu.scala 319:21]
      rs2 <= inst_R.rs2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 320:9]
      rs1 <= inst_R.rs1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 321:9]
      rd <= inst_R.rd @[\\src\\main\\scala\\gcd\\rv_alu.scala 322:8]
      savedOp <= io.mIn @[\\src\\main\\scala\\gcd\\rv_alu.scala 324:13]
      aluOP <= inst_R.func3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 325:11]
      must_halt <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 327:15]
      branchEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 328:18]
      immv <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 329:10]
      din_is_mem <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 331:16]
      node _din_is_alu_T = eq(op, UInt<6>("h37")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 332:26]
      node _din_is_alu_T_1 = eq(op, UInt<2>("h3")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 332:46]
      node _din_is_alu_T_2 = or(_din_is_alu_T, _din_is_alu_T_1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 332:41]
      node _din_is_alu_T_3 = mux(_din_is_alu_T_2, UInt<1>("h0"), UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 332:22]
      din_is_alu <= _din_is_alu_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 332:16]
      alu2_use_reg <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_alu.scala 333:18]
      writeEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 334:17]
      memoryShift <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 335:17]
      node _T_4 = asUInt(UInt<5>("h13")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
      node _T_5 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
      node _T_6 = eq(_T_4, _T_5) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
      when _T_6 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
        immv <= imm_I @[\\src\\main\\scala\\gcd\\rv_alu.scala 339:14]
        alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 340:22]
      else :
        node _T_7 = asUInt(UInt<7>("h63")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
        node _T_8 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
        node _T_9 = eq(_T_7, _T_8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
        when _T_9 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
          branchEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_alu.scala 343:22]
          immv <= imm_B @[\\src\\main\\scala\\gcd\\rv_alu.scala 344:14]
        else :
          node _T_10 = asUInt(UInt<6>("h37")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
          node _T_11 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
          node _T_12 = eq(_T_10, _T_11) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
          when _T_12 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
            immv <= imm_U @[\\src\\main\\scala\\gcd\\rv_alu.scala 347:14]
            rs1 <= inst_R.rd @[\\src\\main\\scala\\gcd\\rv_alu.scala 348:13]
          else :
            node _T_13 = asUInt(UInt<7>("h6f")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
            node _T_14 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
            node _T_15 = eq(_T_13, _T_14) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
            when _T_15 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
              aluOP <= UInt<2>("h2") @[\\src\\main\\scala\\gcd\\rv_alu.scala 351:15]
              branchEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_alu.scala 352:22]
              immv <= imm_J @[\\src\\main\\scala\\gcd\\rv_alu.scala 353:14]
            else :
              node _T_16 = asUInt(UInt<2>("h3")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
              node _T_17 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
              node _T_18 = eq(_T_16, _T_17) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
              when _T_18 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
                din_is_mem <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_alu.scala 356:20]
                aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 358:15]
                branchEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 359:22]
                immv <= imm_I @[\\src\\main\\scala\\gcd\\rv_alu.scala 360:14]
                alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 361:22]
              else :
                node _T_19 = asUInt(UInt<6>("h23")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
                node _T_20 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
                node _T_21 = eq(_T_19, _T_20) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
                when _T_21 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
                  rd <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 364:12]
                  aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 366:15]
                  branchEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 367:22]
                  immv <= imm_S @[\\src\\main\\scala\\gcd\\rv_alu.scala 368:14]
                  alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 369:22]
                  writeEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_alu.scala 370:21]
                  node _memoryShift_T = bits(immv, 1, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 371:28]
                  memoryShift <= _memoryShift_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 371:21]
                else :
                  node _T_22 = asUInt(UInt<7>("h73")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
                  node _T_23 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
                  node _T_24 = eq(_T_22, _T_23) @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
                  when _T_24 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 336:16]
                    rs2 <= UInt<2>("h2") @[\\src\\main\\scala\\gcd\\rv_alu.scala 374:13]
                    rs1 <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_alu.scala 375:13]
                    node _must_halt_T = eq(inst_I.imm, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 376:34]
                    node _must_halt_T_1 = eq(inst_I.rd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 376:57]
                    node _must_halt_T_2 = and(_must_halt_T, _must_halt_T_1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 376:43]
                    node _must_halt_T_3 = eq(inst_I.rs1, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 376:82]
                    node _must_halt_T_4 = and(_must_halt_T_2, _must_halt_T_3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 376:67]
                    node _must_halt_T_5 = eq(inst_I.func3, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 376:108]
                    node _must_halt_T_6 = and(_must_halt_T_4, _must_halt_T_5) @[\\src\\main\\scala\\gcd\\rv_alu.scala 376:91]
                    must_halt <= _must_halt_T_6 @[\\src\\main\\scala\\gcd\\rv_alu.scala 376:19]
    wire branchCheck : UInt<1> @[\\src\\main\\scala\\gcd\\rv_alu.scala 383:25]
    branchCheck <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 384:15]
    node _T_25 = eq(UInt<1>("h0"), aluOP) @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
    when _T_25 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
      branchCheck <= alu_eq @[\\src\\main\\scala\\gcd\\rv_alu.scala 387:19]
    else :
      node _T_26 = eq(UInt<1>("h1"), aluOP) @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
      when _T_26 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
        node _branchCheck_T = not(alu_eq) @[\\src\\main\\scala\\gcd\\rv_alu.scala 390:22]
        branchCheck <= _branchCheck_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 390:19]
      else :
        node _T_27 = eq(UInt<2>("h2"), aluOP) @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
        when _T_27 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
          branchCheck <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_alu.scala 393:19]
        else :
          node _T_28 = eq(UInt<3>("h4"), aluOP) @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
          when _T_28 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
            branchCheck <= alu_lt @[\\src\\main\\scala\\gcd\\rv_alu.scala 396:19]
          else :
            node _T_29 = eq(UInt<3>("h5"), aluOP) @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
            when _T_29 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
              node _branchCheck_T_1 = not(alu_lt) @[\\src\\main\\scala\\gcd\\rv_alu.scala 399:22]
              branchCheck <= _branchCheck_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 399:19]
            else :
              node _T_30 = eq(UInt<3>("h6"), aluOP) @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
              when _T_30 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
                branchCheck <= alu_lt @[\\src\\main\\scala\\gcd\\rv_alu.scala 402:19]
              else :
                node _T_31 = eq(UInt<3>("h7"), aluOP) @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
                when _T_31 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 385:17]
                  node _branchCheck_T_2 = not(alu_lt) @[\\src\\main\\scala\\gcd\\rv_alu.scala 405:22]
                  branchCheck <= _branchCheck_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 405:19]
    when state_exec : @[\\src\\main\\scala\\gcd\\rv_alu.scala 409:19]
      node _PC_T = and(branchEnable, branchCheck) @[\\src\\main\\scala\\gcd\\rv_alu.scala 411:28]
      node _PC_T_1 = mux(_PC_T, branch_target, PC4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 411:14]
      PC <= _PC_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 411:8]


