circuit RiscvCPU :
  module Alu :
    input clock : Clock
    input reset : Reset
    output io : { flip input1 : UInt<32>, flip input2 : UInt<32>, flip func3 : UInt<3>, out : UInt<32>}

    io.out <= UInt<1>("h0") @[rv_alu.scala 26:10]
    node _T = eq(UInt<1>("h0"), io.func3) @[rv_alu.scala 27:20]
    when _T : @[rv_alu.scala 27:20]
      node _io_out_T = add(io.input1, io.input2) @[rv_alu.scala 28:36]
      node _io_out_T_1 = tail(_io_out_T, 1) @[rv_alu.scala 28:36]
      io.out <= _io_out_T_1 @[rv_alu.scala 28:23]
    else :
      node _T_1 = eq(UInt<3>("h7"), io.func3) @[rv_alu.scala 27:20]
      when _T_1 : @[rv_alu.scala 27:20]
        node _io_out_T_2 = and(io.input1, io.input2) @[rv_alu.scala 29:36]
        io.out <= _io_out_T_2 @[rv_alu.scala 29:23]
      else :
        node _T_2 = eq(UInt<3>("h6"), io.func3) @[rv_alu.scala 27:20]
        when _T_2 : @[rv_alu.scala 27:20]
          node _io_out_T_3 = xor(io.input1, io.input2) @[rv_alu.scala 30:36]
          io.out <= _io_out_T_3 @[rv_alu.scala 30:23]
        else :
          node _T_3 = eq(UInt<3>("h4"), io.func3) @[rv_alu.scala 27:20]
          when _T_3 : @[rv_alu.scala 27:20]
            node _io_out_T_4 = or(io.input1, io.input2) @[rv_alu.scala 31:36]
            io.out <= _io_out_T_4 @[rv_alu.scala 31:23]

  module RegisterBank :
    input clock : Clock
    input reset : Reset
    output io : { flip din : UInt<32>, flip rsd : UInt<5>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, outrs1 : UInt<32>, outrs2 : UInt<32>}

    cmem mem : UInt<32> [32] @[rv_alu.scala 144:16]
    node rsdzero = eq(io.rsd, UInt<1>("h0")) @[rv_alu.scala 146:24]
    node _T = eq(rsdzero, UInt<1>("h0")) @[rv_alu.scala 148:8]
    when _T : @[rv_alu.scala 148:18]
      infer mport MPORT = mem[io.rsd], clock @[rv_alu.scala 149:8]
      MPORT <= io.din @[rv_alu.scala 149:17]
    infer mport io_outrs1_MPORT = mem[io.rs1], clock @[rv_alu.scala 152:19]
    io.outrs1 <= io_outrs1_MPORT @[rv_alu.scala 152:13]
    infer mport io_outrs2_MPORT = mem[io.rs2], clock @[rv_alu.scala 153:19]
    io.outrs2 <= io_outrs2_MPORT @[rv_alu.scala 153:13]

  module RiscvCPU :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip mIn : UInt<32>, mWrite : UInt<1>, mMask : UInt<1>[4], mOut : UInt<32>, mAddr : UInt<10>, halted : UInt<1>, db_r1 : UInt<32>, db_r2 : UInt<32>, db_pc : UInt<32>}

    inst alu of Alu @[rv_alu.scala 185:19]
    alu.clock <= clock
    alu.reset <= reset
    inst regs of RegisterBank @[rv_alu.scala 186:20]
    regs.clock <= clock
    regs.reset <= reset
    reg PC : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[rv_alu.scala 188:19]
    node _PC4_T = add(PC, UInt<3>("h4")) @[rv_alu.scala 190:16]
    node PC4 = tail(_PC4_T, 1) @[rv_alu.scala 190:16]
    reg state_start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[rv_alu.scala 192:29]
    reg state_fetch : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 193:29]
    reg state_fetch2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 194:29]
    reg state_decode : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 195:29]
    reg state_exec : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 196:27]
    reg state_halt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 197:27]
    reg rd : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[rv_alu.scala 200:20]
    reg rs1 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[rv_alu.scala 201:20]
    reg rs2 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[rv_alu.scala 202:20]
    reg savedOp : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[rv_alu.scala 203:24]
    reg immv : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[rv_alu.scala 204:21]
    reg aluOP : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[rv_alu.scala 205:22]
    reg din_is_alu : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 206:27]
    reg din_is_mem : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 207:27]
    reg alu2_use_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 208:29]
    reg branchEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 210:29]
    reg writeEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 211:28]
    wire lui_mix : UInt<32> @[rv_alu.scala 213:21]
    wire must_halt : UInt<1> @[rv_alu.scala 214:23]
    wire branch_target : UInt<32> @[rv_alu.scala 215:27]
    wire instruction : UInt<32> @[rv_alu.scala 217:25]
    node _instruction_T = mux(state_decode, io.mIn, savedOp) @[rv_alu.scala 218:21]
    instruction <= _instruction_T @[rv_alu.scala 218:15]
    wire inst : { rest : UInt<25>, opcode : UInt<7>} @[rv_alu.scala 221:36]
    wire _inst_WIRE : UInt<32>
    _inst_WIRE <= instruction
    node _inst_T = bits(_inst_WIRE, 6, 0) @[rv_alu.scala 221:36]
    inst.opcode <= _inst_T @[rv_alu.scala 221:36]
    node _inst_T_1 = bits(_inst_WIRE, 31, 7) @[rv_alu.scala 221:36]
    inst.rest <= _inst_T_1 @[rv_alu.scala 221:36]
    wire inst_I : { imm : UInt<12>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[rv_alu.scala 222:36]
    wire _inst_I_WIRE : UInt<32>
    _inst_I_WIRE <= instruction
    node _inst_I_T = bits(_inst_I_WIRE, 6, 0) @[rv_alu.scala 222:36]
    inst_I.opcode <= _inst_I_T @[rv_alu.scala 222:36]
    node _inst_I_T_1 = bits(_inst_I_WIRE, 11, 7) @[rv_alu.scala 222:36]
    inst_I.rd <= _inst_I_T_1 @[rv_alu.scala 222:36]
    node _inst_I_T_2 = bits(_inst_I_WIRE, 14, 12) @[rv_alu.scala 222:36]
    inst_I.func3 <= _inst_I_T_2 @[rv_alu.scala 222:36]
    node _inst_I_T_3 = bits(_inst_I_WIRE, 19, 15) @[rv_alu.scala 222:36]
    inst_I.rs1 <= _inst_I_T_3 @[rv_alu.scala 222:36]
    node _inst_I_T_4 = bits(_inst_I_WIRE, 31, 20) @[rv_alu.scala 222:36]
    inst_I.imm <= _inst_I_T_4 @[rv_alu.scala 222:36]
    wire inst_R : { func7 : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[rv_alu.scala 223:36]
    wire _inst_R_WIRE : UInt<32>
    _inst_R_WIRE <= instruction
    node _inst_R_T = bits(_inst_R_WIRE, 6, 0) @[rv_alu.scala 223:36]
    inst_R.opcode <= _inst_R_T @[rv_alu.scala 223:36]
    node _inst_R_T_1 = bits(_inst_R_WIRE, 11, 7) @[rv_alu.scala 223:36]
    inst_R.rd <= _inst_R_T_1 @[rv_alu.scala 223:36]
    node _inst_R_T_2 = bits(_inst_R_WIRE, 14, 12) @[rv_alu.scala 223:36]
    inst_R.func3 <= _inst_R_T_2 @[rv_alu.scala 223:36]
    node _inst_R_T_3 = bits(_inst_R_WIRE, 19, 15) @[rv_alu.scala 223:36]
    inst_R.rs1 <= _inst_R_T_3 @[rv_alu.scala 223:36]
    node _inst_R_T_4 = bits(_inst_R_WIRE, 24, 20) @[rv_alu.scala 223:36]
    inst_R.rs2 <= _inst_R_T_4 @[rv_alu.scala 223:36]
    node _inst_R_T_5 = bits(_inst_R_WIRE, 31, 25) @[rv_alu.scala 223:36]
    inst_R.func7 <= _inst_R_T_5 @[rv_alu.scala 223:36]
    wire inst_U : { imm : UInt<20>, rd : UInt<5>, opcode : UInt<7>} @[rv_alu.scala 224:36]
    wire _inst_U_WIRE : UInt<32>
    _inst_U_WIRE <= instruction
    node _inst_U_T = bits(_inst_U_WIRE, 6, 0) @[rv_alu.scala 224:36]
    inst_U.opcode <= _inst_U_T @[rv_alu.scala 224:36]
    node _inst_U_T_1 = bits(_inst_U_WIRE, 11, 7) @[rv_alu.scala 224:36]
    inst_U.rd <= _inst_U_T_1 @[rv_alu.scala 224:36]
    node _inst_U_T_2 = bits(_inst_U_WIRE, 31, 12) @[rv_alu.scala 224:36]
    inst_U.imm <= _inst_U_T_2 @[rv_alu.scala 224:36]
    wire inst_B : { imm12 : UInt<1>, imm10_5 : UInt<6>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, im41 : UInt<4>, im11 : UInt<1>, opcode : UInt<7>} @[rv_alu.scala 225:36]
    wire _inst_B_WIRE : UInt<32>
    _inst_B_WIRE <= instruction
    node _inst_B_T = bits(_inst_B_WIRE, 6, 0) @[rv_alu.scala 225:36]
    inst_B.opcode <= _inst_B_T @[rv_alu.scala 225:36]
    node _inst_B_T_1 = bits(_inst_B_WIRE, 7, 7) @[rv_alu.scala 225:36]
    inst_B.im11 <= _inst_B_T_1 @[rv_alu.scala 225:36]
    node _inst_B_T_2 = bits(_inst_B_WIRE, 11, 8) @[rv_alu.scala 225:36]
    inst_B.im41 <= _inst_B_T_2 @[rv_alu.scala 225:36]
    node _inst_B_T_3 = bits(_inst_B_WIRE, 14, 12) @[rv_alu.scala 225:36]
    inst_B.func3 <= _inst_B_T_3 @[rv_alu.scala 225:36]
    node _inst_B_T_4 = bits(_inst_B_WIRE, 19, 15) @[rv_alu.scala 225:36]
    inst_B.rs1 <= _inst_B_T_4 @[rv_alu.scala 225:36]
    node _inst_B_T_5 = bits(_inst_B_WIRE, 24, 20) @[rv_alu.scala 225:36]
    inst_B.rs2 <= _inst_B_T_5 @[rv_alu.scala 225:36]
    node _inst_B_T_6 = bits(_inst_B_WIRE, 30, 25) @[rv_alu.scala 225:36]
    inst_B.imm10_5 <= _inst_B_T_6 @[rv_alu.scala 225:36]
    node _inst_B_T_7 = bits(_inst_B_WIRE, 31, 31) @[rv_alu.scala 225:36]
    inst_B.imm12 <= _inst_B_T_7 @[rv_alu.scala 225:36]
    wire inst_J : { im20 : UInt<1>, im10_1 : UInt<10>, im11 : UInt<1>, im19_12 : UInt<8>, rd : UInt<5>, opcode : UInt<7>} @[rv_alu.scala 226:36]
    wire _inst_J_WIRE : UInt<32>
    _inst_J_WIRE <= instruction
    node _inst_J_T = bits(_inst_J_WIRE, 6, 0) @[rv_alu.scala 226:36]
    inst_J.opcode <= _inst_J_T @[rv_alu.scala 226:36]
    node _inst_J_T_1 = bits(_inst_J_WIRE, 11, 7) @[rv_alu.scala 226:36]
    inst_J.rd <= _inst_J_T_1 @[rv_alu.scala 226:36]
    node _inst_J_T_2 = bits(_inst_J_WIRE, 19, 12) @[rv_alu.scala 226:36]
    inst_J.im19_12 <= _inst_J_T_2 @[rv_alu.scala 226:36]
    node _inst_J_T_3 = bits(_inst_J_WIRE, 20, 20) @[rv_alu.scala 226:36]
    inst_J.im11 <= _inst_J_T_3 @[rv_alu.scala 226:36]
    node _inst_J_T_4 = bits(_inst_J_WIRE, 30, 21) @[rv_alu.scala 226:36]
    inst_J.im10_1 <= _inst_J_T_4 @[rv_alu.scala 226:36]
    node _inst_J_T_5 = bits(_inst_J_WIRE, 31, 31) @[rv_alu.scala 226:36]
    inst_J.im20 <= _inst_J_T_5 @[rv_alu.scala 226:36]
    wire inst_S : { im11_5 : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, im4 : UInt<5>, opcode : UInt<7>} @[rv_alu.scala 227:36]
    wire _inst_S_WIRE : UInt<32>
    _inst_S_WIRE <= instruction
    node _inst_S_T = bits(_inst_S_WIRE, 6, 0) @[rv_alu.scala 227:36]
    inst_S.opcode <= _inst_S_T @[rv_alu.scala 227:36]
    node _inst_S_T_1 = bits(_inst_S_WIRE, 11, 7) @[rv_alu.scala 227:36]
    inst_S.im4 <= _inst_S_T_1 @[rv_alu.scala 227:36]
    node _inst_S_T_2 = bits(_inst_S_WIRE, 14, 12) @[rv_alu.scala 227:36]
    inst_S.func3 <= _inst_S_T_2 @[rv_alu.scala 227:36]
    node _inst_S_T_3 = bits(_inst_S_WIRE, 19, 15) @[rv_alu.scala 227:36]
    inst_S.rs1 <= _inst_S_T_3 @[rv_alu.scala 227:36]
    node _inst_S_T_4 = bits(_inst_S_WIRE, 24, 20) @[rv_alu.scala 227:36]
    inst_S.rs2 <= _inst_S_T_4 @[rv_alu.scala 227:36]
    node _inst_S_T_5 = bits(_inst_S_WIRE, 31, 25) @[rv_alu.scala 227:36]
    inst_S.im11_5 <= _inst_S_T_5 @[rv_alu.scala 227:36]
    wire sign : UInt<1> @[rv_alu.scala 230:18]
    node _sign_T = bits(io.mIn, 31, 31) @[rv_alu.scala 231:17]
    sign <= _sign_T @[rv_alu.scala 231:8]
    wire imm_I : UInt<32> @[rv_alu.scala 233:20]
    node _imm_I_T = asUInt(asSInt(UInt<20>("hfffff"))) @[rv_alu.scala 234:32]
    node _imm_I_T_1 = mux(sign, _imm_I_T, UInt<20>("h0")) @[rv_alu.scala 234:15]
    node _imm_I_T_2 = cat(_imm_I_T_1, inst_I.imm) @[rv_alu.scala 234:52]
    imm_I <= _imm_I_T_2 @[rv_alu.scala 234:9]
    wire imm_B : UInt<32> @[rv_alu.scala 236:20]
    node _imm_B_T = asUInt(asSInt(UInt<20>("hfffff"))) @[rv_alu.scala 237:32]
    node _imm_B_T_1 = mux(sign, _imm_B_T, UInt<20>("h0")) @[rv_alu.scala 237:15]
    node _imm_B_T_2 = cat(inst_B.im11, inst_B.imm10_5) @[rv_alu.scala 237:68]
    node _imm_B_T_3 = cat(_imm_B_T_2, inst_B.im41) @[rv_alu.scala 237:86]
    node _imm_B_T_4 = cat(_imm_B_T_3, UInt<1>("h0")) @[rv_alu.scala 237:101]
    node _imm_B_T_5 = cat(_imm_B_T_1, _imm_B_T_4) @[rv_alu.scala 237:52]
    imm_B <= _imm_B_T_5 @[rv_alu.scala 237:9]
    wire imm_U : UInt<32> @[rv_alu.scala 239:20]
    node _imm_U_T = cat(inst_U.imm, UInt<12>("h0")) @[rv_alu.scala 240:23]
    imm_U <= _imm_U_T @[rv_alu.scala 240:9]
    wire imm_J : UInt<32> @[rv_alu.scala 242:20]
    node _imm_J_T = bits(io.mIn, 31, 31) @[rv_alu.scala 244:22]
    node _imm_J_T_1 = asUInt(asSInt(UInt<12>("hfff"))) @[rv_alu.scala 244:39]
    node _imm_J_T_2 = mux(_imm_J_T, _imm_J_T_1, UInt<12>("h0")) @[rv_alu.scala 244:15]
    node _imm_J_T_3 = bits(io.mIn, 19, 12) @[rv_alu.scala 244:67]
    node _imm_J_T_4 = cat(_imm_J_T_2, _imm_J_T_3) @[rv_alu.scala 244:58]
    node _imm_J_T_5 = bits(io.mIn, 20, 20) @[rv_alu.scala 244:84]
    node _imm_J_T_6 = cat(_imm_J_T_4, _imm_J_T_5) @[rv_alu.scala 244:75]
    node _imm_J_T_7 = bits(io.mIn, 30, 25) @[rv_alu.scala 244:98]
    node _imm_J_T_8 = cat(_imm_J_T_6, _imm_J_T_7) @[rv_alu.scala 244:89]
    node _imm_J_T_9 = bits(io.mIn, 24, 21) @[rv_alu.scala 244:115]
    node _imm_J_T_10 = cat(_imm_J_T_8, _imm_J_T_9) @[rv_alu.scala 244:106]
    node _imm_J_T_11 = cat(_imm_J_T_10, UInt<1>("h0")) @[rv_alu.scala 244:123]
    imm_J <= _imm_J_T_11 @[rv_alu.scala 244:9]
    wire imm_S : UInt<32> @[rv_alu.scala 247:20]
    node _imm_S_T = asUInt(asSInt(UInt<20>("hfffff"))) @[rv_alu.scala 248:32]
    node _imm_S_T_1 = mux(sign, _imm_S_T, UInt<20>("h0")) @[rv_alu.scala 248:15]
    node _imm_S_T_2 = cat(_imm_S_T_1, inst_S.im11_5) @[rv_alu.scala 248:52]
    node _imm_S_T_3 = cat(_imm_S_T_2, inst_S.im4) @[rv_alu.scala 248:69]
    imm_S <= _imm_S_T_3 @[rv_alu.scala 248:9]
    wire _op_WIRE : UInt<7> @[rv_alu.scala 249:18]
    _op_WIRE <= inst.opcode @[rv_alu.scala 249:18]
    wire op : UInt<7> @[rv_alu.scala 249:18]
    op <= _op_WIRE @[rv_alu.scala 249:18]
    state_start <= UInt<1>("h0") @[rv_alu.scala 251:15]
    node _state_fetch_T = or(state_exec, state_start) @[rv_alu.scala 252:30]
    state_fetch <= _state_fetch_T @[rv_alu.scala 252:15]
    state_decode <= state_fetch @[rv_alu.scala 254:16]
    node _state_exec_T = mux(must_halt, UInt<1>("h0"), state_decode) @[rv_alu.scala 255:21]
    state_exec <= _state_exec_T @[rv_alu.scala 255:14]
    node _state_halt_T = or(must_halt, state_halt) @[rv_alu.scala 256:26]
    state_halt <= _state_halt_T @[rv_alu.scala 256:14]
    io.halted <= state_halt @[rv_alu.scala 258:13]
    node _io_mWrite_T = and(state_exec, writeEnable) @[rv_alu.scala 259:27]
    io.mWrite <= _io_mWrite_T @[rv_alu.scala 259:13]
    node _io_mAddr_T = or(state_fetch, state_start) @[rv_alu.scala 261:31]
    node _io_mAddr_T_1 = mux(_io_mAddr_T, PC, alu.io.out) @[rv_alu.scala 261:18]
    io.mAddr <= _io_mAddr_T_1 @[rv_alu.scala 261:12]
    io.mOut <= regs.io.outrs2 @[rv_alu.scala 262:11]
    node _io_mMask_0_T = and(state_exec, writeEnable) @[rv_alu.scala 263:29]
    io.mMask[0] <= _io_mMask_0_T @[rv_alu.scala 263:15]
    node _io_mMask_1_T = and(state_exec, writeEnable) @[rv_alu.scala 264:29]
    io.mMask[1] <= _io_mMask_1_T @[rv_alu.scala 264:15]
    node _io_mMask_2_T = and(state_exec, writeEnable) @[rv_alu.scala 265:29]
    io.mMask[2] <= _io_mMask_2_T @[rv_alu.scala 265:15]
    node _io_mMask_3_T = and(state_exec, writeEnable) @[rv_alu.scala 266:29]
    io.mMask[3] <= _io_mMask_3_T @[rv_alu.scala 266:15]
    io.halted <= state_halt @[rv_alu.scala 267:13]
    io.db_pc <= PC @[rv_alu.scala 269:12]
    io.db_r1 <= regs.io.outrs1 @[rv_alu.scala 270:12]
    io.db_r2 <= regs.io.outrs2 @[rv_alu.scala 271:12]
    alu.io.input1 <= regs.io.outrs1 @[rv_alu.scala 273:17]
    node _alu_io_input2_T = mux(alu2_use_reg, regs.io.outrs2, immv) @[rv_alu.scala 274:23]
    alu.io.input2 <= _alu_io_input2_T @[rv_alu.scala 274:17]
    alu.io.func3 <= aluOP @[rv_alu.scala 275:16]
    node _regs_io_din_T = mux(din_is_alu, alu.io.out, lui_mix) @[rv_alu.scala 277:21]
    regs.io.din <= _regs_io_din_T @[rv_alu.scala 277:15]
    regs.io.rs1 <= rs1 @[rv_alu.scala 279:15]
    regs.io.rs2 <= rs2 @[rv_alu.scala 280:15]
    node _regs_io_rsd_T = eq(din_is_mem, UInt<1>("h0")) @[rv_alu.scala 281:37]
    node _regs_io_rsd_T_1 = and(state_exec, _regs_io_rsd_T) @[rv_alu.scala 281:35]
    node _regs_io_rsd_T_2 = and(state_fetch, din_is_mem) @[rv_alu.scala 281:65]
    node _regs_io_rsd_T_3 = or(_regs_io_rsd_T_1, _regs_io_rsd_T_2) @[rv_alu.scala 281:50]
    node _regs_io_rsd_T_4 = mux(_regs_io_rsd_T_3, rd, UInt<1>("h0")) @[rv_alu.scala 281:21]
    regs.io.rsd <= _regs_io_rsd_T_4 @[rv_alu.scala 281:15]
    node _lui_mix_T = bits(immv, 31, 12) @[rv_alu.scala 283:44]
    node _lui_mix_T_1 = bits(regs.io.outrs1, 11, 0) @[rv_alu.scala 283:69]
    node _lui_mix_T_2 = cat(_lui_mix_T, _lui_mix_T_1) @[rv_alu.scala 283:52]
    node _lui_mix_T_3 = mux(din_is_mem, io.mIn, _lui_mix_T_2) @[rv_alu.scala 283:17]
    lui_mix <= _lui_mix_T_3 @[rv_alu.scala 283:11]
    must_halt <= UInt<1>("h0") @[rv_alu.scala 284:13]
    node _branch_target_T = add(PC, immv) @[rv_alu.scala 288:23]
    node _branch_target_T_1 = tail(_branch_target_T, 1) @[rv_alu.scala 288:23]
    branch_target <= _branch_target_T_1 @[rv_alu.scala 288:17]
    node alu_eq = eq(regs.io.outrs1, regs.io.outrs2) @[rv_alu.scala 290:31]
    node alu_lt = lt(regs.io.outrs1, regs.io.outrs2) @[rv_alu.scala 291:31]
    alu2_use_reg <= alu2_use_reg @[rv_alu.scala 293:16]
    din_is_alu <= din_is_alu @[rv_alu.scala 295:14]
    when state_decode : @[rv_alu.scala 296:21]
      savedOp <= io.mIn @[rv_alu.scala 297:13]
      aluOP <= inst_R.func3 @[rv_alu.scala 298:11]
      must_halt <= UInt<1>("h0") @[rv_alu.scala 300:15]
      branchEnable <= UInt<1>("h0") @[rv_alu.scala 301:18]
      immv <= UInt<1>("h0") @[rv_alu.scala 302:10]
      rs2 <= inst_R.rs2 @[rv_alu.scala 303:9]
      rs1 <= inst_R.rs1 @[rv_alu.scala 304:9]
      rd <= inst_R.rd @[rv_alu.scala 305:9]
      din_is_mem <= UInt<1>("h0") @[rv_alu.scala 306:16]
      node _din_is_alu_T = eq(op, UInt<6>("h37")) @[rv_alu.scala 307:26]
      node _din_is_alu_T_1 = eq(op, UInt<2>("h3")) @[rv_alu.scala 307:46]
      node _din_is_alu_T_2 = or(_din_is_alu_T, _din_is_alu_T_1) @[rv_alu.scala 307:41]
      node _din_is_alu_T_3 = mux(_din_is_alu_T_2, UInt<1>("h0"), UInt<1>("h1")) @[rv_alu.scala 307:22]
      din_is_alu <= _din_is_alu_T_3 @[rv_alu.scala 307:16]
      alu2_use_reg <= UInt<1>("h1") @[rv_alu.scala 308:18]
      writeEnable <= UInt<1>("h0") @[rv_alu.scala 309:17]
      node _T = asUInt(UInt<5>("h13")) @[rv_alu.scala 310:16]
      node _T_1 = asUInt(op) @[rv_alu.scala 310:16]
      node _T_2 = eq(_T, _T_1) @[rv_alu.scala 310:16]
      when _T_2 : @[rv_alu.scala 310:16]
        rs2 <= UInt<1>("h0") @[rv_alu.scala 312:13]
        immv <= imm_I @[rv_alu.scala 314:14]
        alu2_use_reg <= UInt<1>("h0") @[rv_alu.scala 315:22]
      else :
        node _T_3 = asUInt(UInt<7>("h63")) @[rv_alu.scala 310:16]
        node _T_4 = asUInt(op) @[rv_alu.scala 310:16]
        node _T_5 = eq(_T_3, _T_4) @[rv_alu.scala 310:16]
        when _T_5 : @[rv_alu.scala 310:16]
          branchEnable <= UInt<1>("h1") @[rv_alu.scala 318:22]
          immv <= imm_B @[rv_alu.scala 319:14]
        else :
          node _T_6 = asUInt(UInt<6>("h37")) @[rv_alu.scala 310:16]
          node _T_7 = asUInt(op) @[rv_alu.scala 310:16]
          node _T_8 = eq(_T_6, _T_7) @[rv_alu.scala 310:16]
          when _T_8 : @[rv_alu.scala 310:16]
            immv <= imm_U @[rv_alu.scala 322:14]
            rs1 <= inst_R.rd @[rv_alu.scala 323:13]
          else :
            node _T_9 = asUInt(UInt<7>("h6f")) @[rv_alu.scala 310:16]
            node _T_10 = asUInt(op) @[rv_alu.scala 310:16]
            node _T_11 = eq(_T_9, _T_10) @[rv_alu.scala 310:16]
            when _T_11 : @[rv_alu.scala 310:16]
              aluOP <= UInt<2>("h2") @[rv_alu.scala 326:15]
              branchEnable <= UInt<1>("h1") @[rv_alu.scala 327:22]
              immv <= imm_J @[rv_alu.scala 328:14]
            else :
              node _T_12 = asUInt(UInt<2>("h3")) @[rv_alu.scala 310:16]
              node _T_13 = asUInt(op) @[rv_alu.scala 310:16]
              node _T_14 = eq(_T_12, _T_13) @[rv_alu.scala 310:16]
              when _T_14 : @[rv_alu.scala 310:16]
                din_is_mem <= UInt<1>("h1") @[rv_alu.scala 331:20]
                rs2 <= UInt<1>("h0") @[rv_alu.scala 332:13]
                aluOP <= UInt<1>("h0") @[rv_alu.scala 333:15]
                branchEnable <= UInt<1>("h0") @[rv_alu.scala 334:22]
                immv <= imm_I @[rv_alu.scala 335:14]
                alu2_use_reg <= UInt<1>("h0") @[rv_alu.scala 336:22]
              else :
                node _T_15 = asUInt(UInt<6>("h23")) @[rv_alu.scala 310:16]
                node _T_16 = asUInt(op) @[rv_alu.scala 310:16]
                node _T_17 = eq(_T_15, _T_16) @[rv_alu.scala 310:16]
                when _T_17 : @[rv_alu.scala 310:16]
                  rd <= UInt<1>("h0") @[rv_alu.scala 339:12]
                  aluOP <= UInt<1>("h0") @[rv_alu.scala 340:15]
                  branchEnable <= UInt<1>("h0") @[rv_alu.scala 341:22]
                  immv <= imm_S @[rv_alu.scala 342:14]
                  alu2_use_reg <= UInt<1>("h0") @[rv_alu.scala 343:22]
                  writeEnable <= UInt<1>("h1") @[rv_alu.scala 344:21]
                else :
                  node _T_18 = asUInt(UInt<7>("h73")) @[rv_alu.scala 310:16]
                  node _T_19 = asUInt(op) @[rv_alu.scala 310:16]
                  node _T_20 = eq(_T_18, _T_19) @[rv_alu.scala 310:16]
                  when _T_20 : @[rv_alu.scala 310:16]
                    node _must_halt_T = eq(inst_I.imm, UInt<1>("h1")) @[rv_alu.scala 347:34]
                    node _must_halt_T_1 = eq(inst_I.rd, UInt<1>("h0")) @[rv_alu.scala 347:57]
                    node _must_halt_T_2 = and(_must_halt_T, _must_halt_T_1) @[rv_alu.scala 347:43]
                    node _must_halt_T_3 = eq(inst_I.rs1, UInt<1>("h0")) @[rv_alu.scala 347:82]
                    node _must_halt_T_4 = and(_must_halt_T_2, _must_halt_T_3) @[rv_alu.scala 347:67]
                    node _must_halt_T_5 = eq(inst_I.func3, UInt<1>("h0")) @[rv_alu.scala 347:108]
                    node _must_halt_T_6 = and(_must_halt_T_4, _must_halt_T_5) @[rv_alu.scala 347:91]
                    must_halt <= _must_halt_T_6 @[rv_alu.scala 347:19]
                    rs2 <= UInt<2>("h2") @[rv_alu.scala 348:13]
                    rs1 <= UInt<1>("h1") @[rv_alu.scala 349:13]
    wire branchCheck : UInt<1> @[rv_alu.scala 354:25]
    branchCheck <= UInt<1>("h0") @[rv_alu.scala 355:15]
    node _T_21 = eq(UInt<1>("h0"), aluOP) @[rv_alu.scala 356:17]
    when _T_21 : @[rv_alu.scala 356:17]
      branchCheck <= alu_eq @[rv_alu.scala 358:19]
    else :
      node _T_22 = eq(UInt<1>("h1"), aluOP) @[rv_alu.scala 356:17]
      when _T_22 : @[rv_alu.scala 356:17]
        node _branchCheck_T = not(alu_eq) @[rv_alu.scala 361:22]
        branchCheck <= _branchCheck_T @[rv_alu.scala 361:19]
      else :
        node _T_23 = eq(UInt<2>("h2"), aluOP) @[rv_alu.scala 356:17]
        when _T_23 : @[rv_alu.scala 356:17]
          branchCheck <= UInt<1>("h1") @[rv_alu.scala 364:19]
        else :
          node _T_24 = eq(UInt<3>("h4"), aluOP) @[rv_alu.scala 356:17]
          when _T_24 : @[rv_alu.scala 356:17]
            branchCheck <= alu_lt @[rv_alu.scala 367:19]
          else :
            node _T_25 = eq(UInt<3>("h5"), aluOP) @[rv_alu.scala 356:17]
            when _T_25 : @[rv_alu.scala 356:17]
              node _branchCheck_T_1 = not(alu_lt) @[rv_alu.scala 370:22]
              branchCheck <= _branchCheck_T_1 @[rv_alu.scala 370:19]
            else :
              node _T_26 = eq(UInt<3>("h6"), aluOP) @[rv_alu.scala 356:17]
              when _T_26 : @[rv_alu.scala 356:17]
                branchCheck <= alu_lt @[rv_alu.scala 373:19]
              else :
                node _T_27 = eq(UInt<3>("h7"), aluOP) @[rv_alu.scala 356:17]
                when _T_27 : @[rv_alu.scala 356:17]
                  node _branchCheck_T_2 = not(alu_lt) @[rv_alu.scala 376:22]
                  branchCheck <= _branchCheck_T_2 @[rv_alu.scala 376:19]
    when state_exec : @[rv_alu.scala 380:19]
      node _PC_T = and(branchEnable, branchCheck) @[rv_alu.scala 382:28]
      node _PC_T_1 = mux(_PC_T, branch_target, PC4) @[rv_alu.scala 382:14]
      PC <= _PC_T_1 @[rv_alu.scala 382:8]

