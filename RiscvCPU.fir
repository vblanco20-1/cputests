FIRRTL version 1.2.0
circuit RiscvCPU :
  module Alu :
    input clock : Clock
    input reset : Reset
    output io : { flip input1 : UInt<32>, flip input2 : UInt<32>, flip func3 : UInt<3>, flip sub : UInt<1>, out : UInt<32>, adderOut : UInt<32>, branchOut : UInt<1>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 14:14]

    io.out <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 23:10]
    wire adder : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 25:19]
    node _adder_T = add(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 26:22]
    node _adder_T_1 = tail(_adder_T, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 26:22]
    adder <= _adder_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 26:9]
    io.adderOut <= adder @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:15]
    node _inputMSB_T = bits(io.input1, 31, 31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:31]
    node _inputMSB_T_1 = and(_inputMSB_T, io.sub) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:36]
    node _inputMSB_T_2 = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:58]
    node inputMSB = mux(_inputMSB_T_1, _inputMSB_T_2, UInt<16>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:21]
    node rightBarrel = bits(io.func3, 2, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 31:29]
    wire flippedIn : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 32:23]
    wire flippedOut : UInt<32> @[\\src\\main\\scala\\gcd\\rv_alu.scala 33:24]
    node _flippedIn_T = bits(io.input1, 31, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:42]
    node _flippedIn_T_1 = shl(UInt<16>("hffff"), 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_2 = xor(UInt<32>("hffffffff"), _flippedIn_T_1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_3 = shr(io.input1, 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_4 = and(_flippedIn_T_3, _flippedIn_T_2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_5 = bits(io.input1, 15, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_6 = shl(_flippedIn_T_5, 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_7 = not(_flippedIn_T_2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_8 = and(_flippedIn_T_6, _flippedIn_T_7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_9 = or(_flippedIn_T_4, _flippedIn_T_8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_10 = bits(_flippedIn_T_2, 23, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_11 = shl(_flippedIn_T_10, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_12 = xor(_flippedIn_T_2, _flippedIn_T_11) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_13 = shr(_flippedIn_T_9, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_14 = and(_flippedIn_T_13, _flippedIn_T_12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_15 = bits(_flippedIn_T_9, 23, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_16 = shl(_flippedIn_T_15, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_17 = not(_flippedIn_T_12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_18 = and(_flippedIn_T_16, _flippedIn_T_17) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_19 = or(_flippedIn_T_14, _flippedIn_T_18) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_20 = bits(_flippedIn_T_12, 27, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_21 = shl(_flippedIn_T_20, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_22 = xor(_flippedIn_T_12, _flippedIn_T_21) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_23 = shr(_flippedIn_T_19, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_24 = and(_flippedIn_T_23, _flippedIn_T_22) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_25 = bits(_flippedIn_T_19, 27, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_26 = shl(_flippedIn_T_25, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_27 = not(_flippedIn_T_22) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_28 = and(_flippedIn_T_26, _flippedIn_T_27) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_29 = or(_flippedIn_T_24, _flippedIn_T_28) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_30 = bits(_flippedIn_T_22, 29, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_31 = shl(_flippedIn_T_30, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_32 = xor(_flippedIn_T_22, _flippedIn_T_31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_33 = shr(_flippedIn_T_29, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_34 = and(_flippedIn_T_33, _flippedIn_T_32) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_35 = bits(_flippedIn_T_29, 29, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_36 = shl(_flippedIn_T_35, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_37 = not(_flippedIn_T_32) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_38 = and(_flippedIn_T_36, _flippedIn_T_37) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_39 = or(_flippedIn_T_34, _flippedIn_T_38) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_40 = bits(_flippedIn_T_32, 30, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_41 = shl(_flippedIn_T_40, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_42 = xor(_flippedIn_T_32, _flippedIn_T_41) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_43 = shr(_flippedIn_T_39, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_44 = and(_flippedIn_T_43, _flippedIn_T_42) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_45 = bits(_flippedIn_T_39, 30, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_46 = shl(_flippedIn_T_45, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_47 = not(_flippedIn_T_42) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_48 = and(_flippedIn_T_46, _flippedIn_T_47) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_49 = or(_flippedIn_T_44, _flippedIn_T_48) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:57]
    node _flippedIn_T_50 = mux(rightBarrel, _flippedIn_T, _flippedIn_T_49) @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:19]
    flippedIn <= _flippedIn_T_50 @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:13]
    wire rbarrel : UInt<32>[5] @[\\src\\main\\scala\\gcd\\rv_alu.scala 35:21]
    node _rbarrel_0_T = bits(io.input2, 0, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 36:30]
    node _rbarrel_0_T_1 = cat(inputMSB, flippedIn) @[\\src\\main\\scala\\gcd\\rv_alu.scala 36:44]
    node _rbarrel_0_T_2 = shr(_rbarrel_0_T_1, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 36:57]
    node _rbarrel_0_T_3 = mux(_rbarrel_0_T, _rbarrel_0_T_2, flippedIn) @[\\src\\main\\scala\\gcd\\rv_alu.scala 36:20]
    rbarrel[0] <= _rbarrel_0_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 36:14]
    node _rbarrel_1_T = bits(io.input2, 1, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 37:30]
    node _rbarrel_1_T_1 = cat(inputMSB, rbarrel[0]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 37:44]
    node _rbarrel_1_T_2 = shr(_rbarrel_1_T_1, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 37:58]
    node _rbarrel_1_T_3 = mux(_rbarrel_1_T, _rbarrel_1_T_2, rbarrel[0]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 37:20]
    rbarrel[1] <= _rbarrel_1_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 37:14]
    node _rbarrel_2_T = bits(io.input2, 2, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 38:30]
    node _rbarrel_2_T_1 = cat(inputMSB, rbarrel[1]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 38:44]
    node _rbarrel_2_T_2 = shr(_rbarrel_2_T_1, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 38:58]
    node _rbarrel_2_T_3 = mux(_rbarrel_2_T, _rbarrel_2_T_2, rbarrel[1]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 38:20]
    rbarrel[2] <= _rbarrel_2_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 38:14]
    node _rbarrel_3_T = bits(io.input2, 3, 3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 39:30]
    node _rbarrel_3_T_1 = cat(inputMSB, rbarrel[2]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 39:44]
    node _rbarrel_3_T_2 = shr(_rbarrel_3_T_1, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 39:58]
    node _rbarrel_3_T_3 = mux(_rbarrel_3_T, _rbarrel_3_T_2, rbarrel[2]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 39:20]
    rbarrel[3] <= _rbarrel_3_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 39:14]
    node _rbarrel_4_T = bits(io.input2, 4, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 40:30]
    node _rbarrel_4_T_1 = cat(inputMSB, rbarrel[3]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 40:44]
    node _rbarrel_4_T_2 = shr(_rbarrel_4_T_1, 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 40:58]
    node _rbarrel_4_T_3 = mux(_rbarrel_4_T, _rbarrel_4_T_2, rbarrel[3]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 40:20]
    rbarrel[4] <= _rbarrel_4_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 40:14]
    node _flippedOut_T = bits(rbarrel[4], 31, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:44]
    node _flippedOut_T_1 = shl(UInt<16>("hffff"), 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_2 = xor(UInt<32>("hffffffff"), _flippedOut_T_1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_3 = shr(rbarrel[4], 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_4 = and(_flippedOut_T_3, _flippedOut_T_2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_5 = bits(rbarrel[4], 15, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_6 = shl(_flippedOut_T_5, 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_7 = not(_flippedOut_T_2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_8 = and(_flippedOut_T_6, _flippedOut_T_7) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_9 = or(_flippedOut_T_4, _flippedOut_T_8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_10 = bits(_flippedOut_T_2, 23, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_11 = shl(_flippedOut_T_10, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_12 = xor(_flippedOut_T_2, _flippedOut_T_11) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_13 = shr(_flippedOut_T_9, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_14 = and(_flippedOut_T_13, _flippedOut_T_12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_15 = bits(_flippedOut_T_9, 23, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_16 = shl(_flippedOut_T_15, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_17 = not(_flippedOut_T_12) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_18 = and(_flippedOut_T_16, _flippedOut_T_17) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_19 = or(_flippedOut_T_14, _flippedOut_T_18) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_20 = bits(_flippedOut_T_12, 27, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_21 = shl(_flippedOut_T_20, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_22 = xor(_flippedOut_T_12, _flippedOut_T_21) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_23 = shr(_flippedOut_T_19, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_24 = and(_flippedOut_T_23, _flippedOut_T_22) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_25 = bits(_flippedOut_T_19, 27, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_26 = shl(_flippedOut_T_25, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_27 = not(_flippedOut_T_22) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_28 = and(_flippedOut_T_26, _flippedOut_T_27) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_29 = or(_flippedOut_T_24, _flippedOut_T_28) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_30 = bits(_flippedOut_T_22, 29, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_31 = shl(_flippedOut_T_30, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_32 = xor(_flippedOut_T_22, _flippedOut_T_31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_33 = shr(_flippedOut_T_29, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_34 = and(_flippedOut_T_33, _flippedOut_T_32) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_35 = bits(_flippedOut_T_29, 29, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_36 = shl(_flippedOut_T_35, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_37 = not(_flippedOut_T_32) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_38 = and(_flippedOut_T_36, _flippedOut_T_37) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_39 = or(_flippedOut_T_34, _flippedOut_T_38) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_40 = bits(_flippedOut_T_32, 30, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_41 = shl(_flippedOut_T_40, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_42 = xor(_flippedOut_T_32, _flippedOut_T_41) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_43 = shr(_flippedOut_T_39, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_44 = and(_flippedOut_T_43, _flippedOut_T_42) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_45 = bits(_flippedOut_T_39, 30, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_46 = shl(_flippedOut_T_45, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_47 = not(_flippedOut_T_42) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_48 = and(_flippedOut_T_46, _flippedOut_T_47) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_49 = or(_flippedOut_T_44, _flippedOut_T_48) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:60]
    node _flippedOut_T_50 = mux(rightBarrel, _flippedOut_T, _flippedOut_T_49) @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:20]
    flippedOut <= _flippedOut_T_50 @[\\src\\main\\scala\\gcd\\rv_alu.scala 41:14]
    wire aluminus : UInt<33> @[\\src\\main\\scala\\gcd\\rv_alu.scala 61:22]
    node _aluminus_T = cat(UInt<1>("h1"), io.input1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:23]
    node _aluminus_T_1 = not(io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:51]
    node _aluminus_T_2 = cat(UInt<1>("h0"), _aluminus_T_1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:48]
    node _aluminus_T_3 = add(_aluminus_T, _aluminus_T_2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:37]
    node _aluminus_T_4 = tail(_aluminus_T_3, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:37]
    node _aluminus_T_5 = dshr(asSInt(UInt<1>("h1")), UInt<6>("h21")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:70]
    node _aluminus_T_6 = bits(_aluminus_T_5, 0, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:70]
    node _aluminus_T_7 = add(_aluminus_T_4, _aluminus_T_6) @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:63]
    node _aluminus_T_8 = tail(_aluminus_T_7, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:63]
    aluminus <= _aluminus_T_8 @[\\src\\main\\scala\\gcd\\rv_alu.scala 62:12]
    node eq = eq(aluminus, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 64:21]
    node _lt_T = bits(io.input1, 31, 31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 65:26]
    node _lt_T_1 = bits(io.input2, 31, 31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 65:42]
    node _lt_T_2 = xor(_lt_T, _lt_T_1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 65:31]
    node _lt_T_3 = bits(io.input1, 31, 31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 65:58]
    node _lt_T_4 = bits(aluminus, 32, 32) @[\\src\\main\\scala\\gcd\\rv_alu.scala 65:72]
    node lt = mux(_lt_T_2, _lt_T_3, _lt_T_4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 65:15]
    node ltu = bits(aluminus, 32, 32) @[\\src\\main\\scala\\gcd\\rv_alu.scala 66:21]
    io.out is invalid @[\\src\\main\\scala\\gcd\\rv_alu.scala 69:10]
    io.branchOut <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 70:16]
    node _T = eq(UInt<1>("h0"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
    when _T : @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
      node _io_out_T = sub(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 73:48]
      node _io_out_T_1 = tail(_io_out_T, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 73:48]
      node _io_out_T_2 = mux(io.sub, _io_out_T_1, adder) @[\\src\\main\\scala\\gcd\\rv_alu.scala 73:29]
      io.out <= _io_out_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 73:23]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
      when _T_1 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
        io.out <= flippedOut @[\\src\\main\\scala\\gcd\\rv_alu.scala 74:24]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
        when _T_2 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
          node _io_out_T_3 = mux(lt, UInt<1>("h1"), UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 75:30]
          io.out <= _io_out_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 75:24]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
          when _T_3 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
            node _io_out_T_4 = mux(ltu, UInt<1>("h1"), UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 76:30]
            io.out <= _io_out_T_4 @[\\src\\main\\scala\\gcd\\rv_alu.scala 76:24]
          else :
            node _T_4 = eq(UInt<3>("h5"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
            when _T_4 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
              io.out <= flippedOut @[\\src\\main\\scala\\gcd\\rv_alu.scala 77:24]
            else :
              node _T_5 = eq(UInt<3>("h7"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
              when _T_5 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
                node _io_out_T_5 = and(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 80:36]
                io.out <= _io_out_T_5 @[\\src\\main\\scala\\gcd\\rv_alu.scala 80:23]
              else :
                node _T_6 = eq(UInt<3>("h6"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
                when _T_6 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
                  node _io_out_T_6 = xor(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 81:36]
                  io.out <= _io_out_T_6 @[\\src\\main\\scala\\gcd\\rv_alu.scala 81:23]
                else :
                  node _T_7 = eq(UInt<3>("h4"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
                  when _T_7 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 72:20]
                    node _io_out_T_7 = or(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 82:36]
                    io.out <= _io_out_T_7 @[\\src\\main\\scala\\gcd\\rv_alu.scala 82:23]
    node _T_8 = eq(UInt<1>("h0"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
    when _T_8 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
      io.branchOut <= eq @[\\src\\main\\scala\\gcd\\rv_alu.scala 87:20]
    else :
      node _T_9 = eq(UInt<1>("h1"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
      when _T_9 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
        node _io_branchOut_T = not(eq) @[\\src\\main\\scala\\gcd\\rv_alu.scala 90:23]
        io.branchOut <= _io_branchOut_T @[\\src\\main\\scala\\gcd\\rv_alu.scala 90:20]
      else :
        node _T_10 = eq(UInt<3>("h4"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
        when _T_10 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
          io.branchOut <= lt @[\\src\\main\\scala\\gcd\\rv_alu.scala 93:20]
        else :
          node _T_11 = eq(UInt<3>("h5"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
          when _T_11 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
            node _io_branchOut_T_1 = not(lt) @[\\src\\main\\scala\\gcd\\rv_alu.scala 96:23]
            io.branchOut <= _io_branchOut_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 96:20]
          else :
            node _T_12 = eq(UInt<3>("h6"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
            when _T_12 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
              io.branchOut <= ltu @[\\src\\main\\scala\\gcd\\rv_alu.scala 99:20]
            else :
              node _T_13 = eq(UInt<3>("h7"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
              when _T_13 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 85:20]
                node _io_branchOut_T_2 = not(ltu) @[\\src\\main\\scala\\gcd\\rv_alu.scala 102:23]
                io.branchOut <= _io_branchOut_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 102:20]


  module RegisterBank :
    input clock : Clock
    input reset : Reset
    output io : { flip din : UInt<32>, flip rsd : UInt<5>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, outrs1 : UInt<32>, outrs2 : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 132:14]

    cmem mem1 : UInt<32> [32] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 141:17]
    cmem mem2 : UInt<32> [32] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 142:17]
    node rsdzero = eq(io.rsd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 144:24]
    wire write : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 146:19]
    node _write_T = eq(io.rsd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 148:23]
    node _write_T_1 = mux(_write_T, UInt<1>("h0"), io.din) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 148:15]
    write <= _write_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 148:9]
    write mport MPORT = mem1[io.rsd], clock
    MPORT <= write
    write mport MPORT_1 = mem2[io.rsd], clock
    MPORT_1 <= write
    read mport io_outrs1_MPORT = mem1[io.rs1], clock @[\\src\\main\\scala\\gcd\\rv_cpu.scala 153:25]
    io.outrs1 <= io_outrs1_MPORT @[\\src\\main\\scala\\gcd\\rv_cpu.scala 153:13]
    read mport io_outrs2_MPORT = mem2[io.rs2], clock @[\\src\\main\\scala\\gcd\\rv_cpu.scala 154:25]
    io.outrs2 <= io_outrs2_MPORT @[\\src\\main\\scala\\gcd\\rv_cpu.scala 154:13]

  module MemShift :
    input clock : Clock
    input reset : Reset
    output io : { flip shift : UInt<2>, flip in : UInt<32>, out : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 86:14]

    wire vin : UInt<8>[4] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 93:17]
    wire vout : UInt<8>[4] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 94:19]
    node _vin_0_T = bits(io.in, 7, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 96:18]
    vin[0] <= _vin_0_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 96:10]
    node _vin_1_T = bits(io.in, 15, 8) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 97:18]
    vin[1] <= _vin_1_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 97:10]
    node _vin_2_T = bits(io.in, 23, 16) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 98:18]
    vin[2] <= _vin_2_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 98:10]
    node _vin_3_T = bits(io.in, 31, 24) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 99:18]
    vin[3] <= _vin_3_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 99:10]
    vout <= vin @[\\src\\main\\scala\\gcd\\rv_cpu.scala 102:8]
    node io_out_lo = cat(vout[1], vout[0]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 104:18]
    node io_out_hi = cat(vout[3], vout[2]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 104:18]
    node _io_out_T = cat(io_out_hi, io_out_lo) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 104:18]
    io.out <= _io_out_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 104:10]
    node _T = eq(UInt<1>("h0"), io.shift) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 105:20]
    when _T : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 105:20]
      vout <= vin @[\\src\\main\\scala\\gcd\\rv_cpu.scala 108:12]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.shift) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 105:20]
      when _T_1 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 105:20]
        vout[0] <= vin[3] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 111:15]
        vout[1] <= vin[0] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 112:15]
        vout[2] <= vin[1] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 113:15]
        vout[3] <= vin[2] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 114:15]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.shift) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 105:20]
        when _T_2 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 105:20]
          vout[0] <= vin[2] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 117:15]
          vout[1] <= vin[3] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 118:15]
          vout[2] <= vin[0] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 119:15]
          vout[3] <= vin[1] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 120:15]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.shift) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 105:20]
          when _T_3 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 105:20]
            vout[0] <= vin[1] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 123:15]
            vout[1] <= vin[2] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 124:15]
            vout[2] <= vin[3] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 125:15]
            vout[3] <= vin[0] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 126:15]


  module RiscvCPU :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip mIn : UInt<32>, mWrite : UInt<1>, mMask : UInt<1>[4], mOut : UInt<32>, mAddr : UInt<30>, halted : UInt<1>, db_r1 : UInt<32>, db_r2 : UInt<32>, db_pc : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 181:14]

    inst alu of Alu @[\\src\\main\\scala\\gcd\\rv_cpu.scala 193:19]
    alu.clock <= clock
    alu.reset <= reset
    inst regs of RegisterBank @[\\src\\main\\scala\\gcd\\rv_cpu.scala 194:20]
    regs.clock <= clock
    regs.reset <= reset
    inst mshift of MemShift @[\\src\\main\\scala\\gcd\\rv_cpu.scala 195:22]
    mshift.clock <= clock
    mshift.reset <= reset
    reg PC : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 196:19]
    node _PC4_T = add(PC, UInt<3>("h4")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 198:16]
    node PC4 = tail(_PC4_T, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 198:16]
    reg state_start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 200:29]
    reg state_fetch : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 201:29]
    reg state_fetch2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 202:29]
    reg state_decode : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 203:29]
    reg state_exec : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 204:27]
    reg state_halt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 205:27]
    reg rd : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 208:19]
    reg rs1 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 209:19]
    reg rs2 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 210:20]
    reg immv : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 212:21]
    reg aluOP : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 213:22]
    reg memoryWidth : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 214:28]
    reg din_is_alu : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 215:27]
    reg din_is_mem : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 216:27]
    reg alu2_use_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 217:29]
    reg alu_sub : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 218:24]
    reg branchEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 221:29]
    reg jumpEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 222:27]
    reg absjumpEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 223:30]
    reg storePC : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 224:24]
    reg writeEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 225:28]
    wire writeMask : UInt<1>[4] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 226:23]
    wire lui_mix : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 228:21]
    wire must_halt : UInt<1> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 229:23]
    wire branch_target : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 230:27]
    wire instruction : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 232:25]
    instruction <= io.mIn @[\\src\\main\\scala\\gcd\\rv_cpu.scala 233:15]
    wire inst : { rest : UInt<25>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 238:36]
    wire _inst_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 238:36]
    _inst_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 238:36]
    node _inst_T = bits(_inst_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 238:36]
    inst.opcode <= _inst_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 238:36]
    node _inst_T_1 = bits(_inst_WIRE, 31, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 238:36]
    inst.rest <= _inst_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 238:36]
    wire inst_I : { imm : UInt<12>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    wire _inst_I_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    _inst_I_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    node _inst_I_T = bits(_inst_I_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    inst_I.opcode <= _inst_I_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    node _inst_I_T_1 = bits(_inst_I_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    inst_I.rd <= _inst_I_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    node _inst_I_T_2 = bits(_inst_I_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    inst_I.func3 <= _inst_I_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    node _inst_I_T_3 = bits(_inst_I_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    inst_I.rs1 <= _inst_I_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    node _inst_I_T_4 = bits(_inst_I_WIRE, 31, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    inst_I.imm <= _inst_I_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:36]
    wire inst_R : { func7 : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    wire _inst_R_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    _inst_R_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    node _inst_R_T = bits(_inst_R_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    inst_R.opcode <= _inst_R_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    node _inst_R_T_1 = bits(_inst_R_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    inst_R.rd <= _inst_R_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    node _inst_R_T_2 = bits(_inst_R_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    inst_R.func3 <= _inst_R_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    node _inst_R_T_3 = bits(_inst_R_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    inst_R.rs1 <= _inst_R_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    node _inst_R_T_4 = bits(_inst_R_WIRE, 24, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    inst_R.rs2 <= _inst_R_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    node _inst_R_T_5 = bits(_inst_R_WIRE, 31, 25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    inst_R.func7 <= _inst_R_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:36]
    wire inst_U : { imm : UInt<20>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:36]
    wire _inst_U_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:36]
    _inst_U_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:36]
    node _inst_U_T = bits(_inst_U_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:36]
    inst_U.opcode <= _inst_U_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:36]
    node _inst_U_T_1 = bits(_inst_U_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:36]
    inst_U.rd <= _inst_U_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:36]
    node _inst_U_T_2 = bits(_inst_U_WIRE, 31, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:36]
    inst_U.imm <= _inst_U_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:36]
    wire inst_B : { imm12 : UInt<1>, imm10_5 : UInt<6>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, im41 : UInt<4>, im11 : UInt<1>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    wire _inst_B_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    _inst_B_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    node _inst_B_T = bits(_inst_B_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    inst_B.opcode <= _inst_B_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    node _inst_B_T_1 = bits(_inst_B_WIRE, 7, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    inst_B.im11 <= _inst_B_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    node _inst_B_T_2 = bits(_inst_B_WIRE, 11, 8) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    inst_B.im41 <= _inst_B_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    node _inst_B_T_3 = bits(_inst_B_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    inst_B.func3 <= _inst_B_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    node _inst_B_T_4 = bits(_inst_B_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    inst_B.rs1 <= _inst_B_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    node _inst_B_T_5 = bits(_inst_B_WIRE, 24, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    inst_B.rs2 <= _inst_B_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    node _inst_B_T_6 = bits(_inst_B_WIRE, 30, 25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    inst_B.imm10_5 <= _inst_B_T_6 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    node _inst_B_T_7 = bits(_inst_B_WIRE, 31, 31) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    inst_B.imm12 <= _inst_B_T_7 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:36]
    wire inst_J : { im20 : UInt<1>, im10_1 : UInt<10>, im11 : UInt<1>, im19_12 : UInt<8>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    wire _inst_J_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    _inst_J_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    node _inst_J_T = bits(_inst_J_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    inst_J.opcode <= _inst_J_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    node _inst_J_T_1 = bits(_inst_J_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    inst_J.rd <= _inst_J_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    node _inst_J_T_2 = bits(_inst_J_WIRE, 19, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    inst_J.im19_12 <= _inst_J_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    node _inst_J_T_3 = bits(_inst_J_WIRE, 20, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    inst_J.im11 <= _inst_J_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    node _inst_J_T_4 = bits(_inst_J_WIRE, 30, 21) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    inst_J.im10_1 <= _inst_J_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    node _inst_J_T_5 = bits(_inst_J_WIRE, 31, 31) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    inst_J.im20 <= _inst_J_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:36]
    wire inst_S : { im11_5 : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, im4 : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    wire _inst_S_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    _inst_S_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    node _inst_S_T = bits(_inst_S_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    inst_S.opcode <= _inst_S_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    node _inst_S_T_1 = bits(_inst_S_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    inst_S.im4 <= _inst_S_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    node _inst_S_T_2 = bits(_inst_S_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    inst_S.func3 <= _inst_S_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    node _inst_S_T_3 = bits(_inst_S_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    inst_S.rs1 <= _inst_S_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    node _inst_S_T_4 = bits(_inst_S_WIRE, 24, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    inst_S.rs2 <= _inst_S_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    node _inst_S_T_5 = bits(_inst_S_WIRE, 31, 25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    inst_S.im11_5 <= _inst_S_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:36]
    wire _op_WIRE : UInt<7> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 246:18]
    _op_WIRE <= inst.opcode @[\\src\\main\\scala\\gcd\\rv_cpu.scala 246:18]
    wire op : UInt<7> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 246:18]
    op <= _op_WIRE @[\\src\\main\\scala\\gcd\\rv_cpu.scala 246:18]
    wire sign : UInt<1> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 249:18]
    node _sign_T = bits(io.mIn, 31, 31) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 250:17]
    sign <= _sign_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 250:8]
    wire imm_I : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 252:20]
    node _imm_I_T = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 253:32]
    node _imm_I_T_1 = mux(sign, _imm_I_T, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 253:15]
    node _imm_I_T_2 = cat(_imm_I_T_1, inst_I.imm) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 253:52]
    imm_I <= _imm_I_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 253:9]
    wire imm_B : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 255:20]
    node _imm_B_T = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 256:32]
    node _imm_B_T_1 = mux(sign, _imm_B_T, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 256:15]
    node _imm_B_T_2 = cat(inst_B.im11, inst_B.imm10_5) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 256:68]
    node _imm_B_T_3 = cat(_imm_B_T_2, inst_B.im41) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 256:86]
    node _imm_B_T_4 = cat(_imm_B_T_3, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 256:101]
    node _imm_B_T_5 = cat(_imm_B_T_1, _imm_B_T_4) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 256:52]
    imm_B <= _imm_B_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 256:9]
    wire imm_U : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 258:20]
    node _imm_U_T = cat(inst_U.imm, UInt<12>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 259:23]
    imm_U <= _imm_U_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 259:9]
    wire imm_J : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 261:20]
    node _imm_J_T = bits(io.mIn, 31, 31) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:21]
    node _imm_J_T_1 = asUInt(asSInt(UInt<12>("hfff"))) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:38]
    node _imm_J_T_2 = mux(_imm_J_T, _imm_J_T_1, UInt<12>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:14]
    node _imm_J_T_3 = bits(io.mIn, 19, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:66]
    node _imm_J_T_4 = cat(_imm_J_T_2, _imm_J_T_3) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:57]
    node _imm_J_T_5 = bits(io.mIn, 20, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:83]
    node _imm_J_T_6 = cat(_imm_J_T_4, _imm_J_T_5) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:74]
    node _imm_J_T_7 = bits(io.mIn, 30, 25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:97]
    node _imm_J_T_8 = cat(_imm_J_T_6, _imm_J_T_7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:88]
    node _imm_J_T_9 = bits(io.mIn, 24, 21) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:114]
    node _imm_J_T_10 = cat(_imm_J_T_8, _imm_J_T_9) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:105]
    node _imm_J_T_11 = cat(_imm_J_T_10, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:122]
    imm_J <= _imm_J_T_11 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 262:8]
    wire imm_S : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 264:20]
    node _imm_S_T = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:32]
    node _imm_S_T_1 = mux(sign, _imm_S_T, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:15]
    node _imm_S_T_2 = cat(_imm_S_T_1, inst_S.im11_5) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:52]
    node _imm_S_T_3 = cat(_imm_S_T_2, inst_S.im4) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:69]
    imm_S <= _imm_S_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:9]
    wire memAddr : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:22]
    state_start <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:15]
    node _state_fetch_T = or(state_exec, state_start) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 272:30]
    state_fetch <= _state_fetch_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 272:15]
    state_decode <= state_fetch @[\\src\\main\\scala\\gcd\\rv_cpu.scala 274:16]
    node _state_exec_T = mux(must_halt, UInt<1>("h0"), state_decode) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 275:21]
    state_exec <= _state_exec_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 275:14]
    node _state_halt_T = or(must_halt, state_halt) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 276:26]
    state_halt <= _state_halt_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 276:14]
    io.halted <= state_halt @[\\src\\main\\scala\\gcd\\rv_cpu.scala 278:13]
    node _io_mWrite_T = and(state_exec, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 279:27]
    io.mWrite <= _io_mWrite_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 279:13]
    node _memAddr_T = or(state_fetch, state_start) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 281:31]
    node _memAddr_T_1 = mux(_memAddr_T, PC, alu.io.adderOut) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 281:18]
    memAddr <= _memAddr_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 281:11]
    node _io_mAddr_T = shr(memAddr, 2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 283:23]
    io.mAddr <= _io_mAddr_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 283:12]
    io.mOut <= mshift.io.out @[\\src\\main\\scala\\gcd\\rv_cpu.scala 284:11]
    node _io_mMask_0_T = and(state_exec, writeMask[0]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 285:29]
    node _io_mMask_0_T_1 = and(_io_mMask_0_T, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 285:44]
    io.mMask[0] <= _io_mMask_0_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 285:15]
    node _io_mMask_1_T = and(state_exec, writeMask[1]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 286:29]
    node _io_mMask_1_T_1 = and(_io_mMask_1_T, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 286:44]
    io.mMask[1] <= _io_mMask_1_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 286:15]
    node _io_mMask_2_T = and(state_exec, writeMask[2]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 287:29]
    node _io_mMask_2_T_1 = and(_io_mMask_2_T, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 287:44]
    io.mMask[2] <= _io_mMask_2_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 287:15]
    node _io_mMask_3_T = and(state_exec, writeMask[3]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 288:29]
    node _io_mMask_3_T_1 = and(_io_mMask_3_T, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 288:44]
    io.mMask[3] <= _io_mMask_3_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 288:15]
    io.halted <= state_halt @[\\src\\main\\scala\\gcd\\rv_cpu.scala 289:13]
    io.db_pc <= PC @[\\src\\main\\scala\\gcd\\rv_cpu.scala 291:12]
    io.db_r1 <= regs.io.outrs1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 292:12]
    io.db_r2 <= regs.io.outrs2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 293:12]
    alu.io.input1 <= regs.io.outrs1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 295:17]
    node _alu_io_input2_T = mux(alu2_use_reg, regs.io.outrs2, immv) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 296:23]
    alu.io.input2 <= _alu_io_input2_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 296:17]
    alu.io.func3 <= aluOP @[\\src\\main\\scala\\gcd\\rv_cpu.scala 297:16]
    alu.io.sub <= alu_sub @[\\src\\main\\scala\\gcd\\rv_cpu.scala 298:14]
    node _regs_io_din_T = mux(din_is_alu, alu.io.out, lui_mix) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 299:39]
    node _regs_io_din_T_1 = mux(storePC, PC4, _regs_io_din_T) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 299:21]
    regs.io.din <= _regs_io_din_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 299:15]
    regs.io.rs1 <= rs1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 301:15]
    regs.io.rs2 <= rs2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 302:15]
    node _regs_io_rsd_T = eq(din_is_mem, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 303:37]
    node _regs_io_rsd_T_1 = and(state_exec, _regs_io_rsd_T) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 303:35]
    node _regs_io_rsd_T_2 = and(state_fetch, din_is_mem) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 303:65]
    node _regs_io_rsd_T_3 = or(_regs_io_rsd_T_1, _regs_io_rsd_T_2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 303:50]
    node _regs_io_rsd_T_4 = mux(_regs_io_rsd_T_3, rd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 303:21]
    regs.io.rsd <= _regs_io_rsd_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 303:15]
    node _lui_mix_T = bits(immv, 31, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 305:44]
    node _lui_mix_T_1 = bits(regs.io.outrs1, 11, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 305:69]
    node _lui_mix_T_2 = cat(_lui_mix_T, _lui_mix_T_1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 305:52]
    node _lui_mix_T_3 = mux(din_is_mem, io.mIn, _lui_mix_T_2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 305:17]
    lui_mix <= _lui_mix_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 305:11]
    must_halt <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 306:13]
    alu2_use_reg <= alu2_use_reg @[\\src\\main\\scala\\gcd\\rv_cpu.scala 309:16]
    mshift.io.in <= regs.io.outrs2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 311:16]
    node _mshift_io_shift_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 312:29]
    mshift.io.shift <= _mshift_io_shift_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 312:19]
    writeMask[0] <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 314:16]
    writeMask[1] <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 315:16]
    writeMask[2] <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 316:16]
    writeMask[3] <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 317:16]
    node _T = eq(UInt<1>("h0"), memoryWidth) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 318:23]
    when _T : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 318:23]
      node _writeMask_0_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 320:30]
      node _writeMask_0_T_1 = eq(_writeMask_0_T, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 320:36]
      writeMask[0] <= _writeMask_0_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 320:20]
      node _writeMask_1_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 321:30]
      node _writeMask_1_T_1 = eq(_writeMask_1_T, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 321:36]
      writeMask[1] <= _writeMask_1_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 321:20]
      node _writeMask_2_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 322:30]
      node _writeMask_2_T_1 = eq(_writeMask_2_T, UInt<2>("h2")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 322:36]
      writeMask[2] <= _writeMask_2_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 322:20]
      node _writeMask_3_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 323:30]
      node _writeMask_3_T_1 = eq(_writeMask_3_T, UInt<2>("h3")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 323:36]
      writeMask[3] <= _writeMask_3_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 323:20]
    else :
      node _T_1 = eq(UInt<1>("h1"), memoryWidth) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 318:23]
      when _T_1 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 318:23]
        node _writeMask_0_T_2 = bits(memAddr, 1, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 326:30]
        node _writeMask_0_T_3 = eq(_writeMask_0_T_2, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 326:34]
        writeMask[0] <= _writeMask_0_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 326:20]
        node _writeMask_1_T_2 = bits(memAddr, 1, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 327:30]
        node _writeMask_1_T_3 = eq(_writeMask_1_T_2, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 327:34]
        writeMask[1] <= _writeMask_1_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 327:20]
        node _writeMask_2_T_2 = bits(memAddr, 1, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 328:30]
        node _writeMask_2_T_3 = eq(_writeMask_2_T_2, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 328:34]
        writeMask[2] <= _writeMask_2_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 328:20]
        node _writeMask_3_T_2 = bits(memAddr, 1, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 329:30]
        node _writeMask_3_T_3 = eq(_writeMask_3_T_2, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 329:34]
        writeMask[3] <= _writeMask_3_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 329:20]
      else :
        node _T_2 = eq(UInt<2>("h2"), memoryWidth) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 318:23]
        when _T_2 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 318:23]
          writeMask[0] <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 332:20]
          writeMask[1] <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 333:20]
          writeMask[2] <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 334:20]
          writeMask[3] <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 335:20]
    din_is_alu <= din_is_alu @[\\src\\main\\scala\\gcd\\rv_cpu.scala 339:14]
    when state_decode : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 340:21]
      rs2 <= inst_R.rs2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 341:9]
      rs1 <= inst_R.rs1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 342:9]
      rd <= inst_R.rd @[\\src\\main\\scala\\gcd\\rv_cpu.scala 343:8]
      aluOP <= inst_R.func3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 345:11]
      must_halt <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 346:15]
      branchEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 347:18]
      jumpEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 348:16]
      immv <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 349:10]
      alu_sub <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 350:13]
      din_is_mem <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 351:16]
      node _din_is_alu_T = eq(op, UInt<6>("h37")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:26]
      node _din_is_alu_T_1 = eq(op, UInt<2>("h3")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:46]
      node _din_is_alu_T_2 = or(_din_is_alu_T, _din_is_alu_T_1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:41]
      node _din_is_alu_T_3 = mux(_din_is_alu_T_2, UInt<1>("h0"), UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:22]
      din_is_alu <= _din_is_alu_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:16]
      alu2_use_reg <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 353:18]
      writeEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 354:17]
      storePC <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 355:13]
      absjumpEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 356:19]
      memoryWidth <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 357:17]
      node _T_3 = asUInt(UInt<6>("h33")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
      node _T_4 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
      node _T_5 = eq(_T_3, _T_4) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
      when _T_5 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
        node _alu_sub_T = eq(inst_R.func7, UInt<6>("h20")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 361:33]
        alu_sub <= _alu_sub_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 361:17]
      else :
        node _T_6 = asUInt(UInt<5>("h13")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
        node _T_7 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
        node _T_8 = eq(_T_6, _T_7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
        when _T_8 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
          immv <= imm_I @[\\src\\main\\scala\\gcd\\rv_cpu.scala 365:14]
          alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 366:22]
          node _alu_sub_T_1 = eq(inst_I.func3, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 368:39]
          node _alu_sub_T_2 = eq(inst_I.func3, UInt<3>("h5")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 368:64]
          node _alu_sub_T_3 = or(_alu_sub_T_1, _alu_sub_T_2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 368:48]
          node _alu_sub_T_4 = eq(inst_R.func7, UInt<6>("h20")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 368:88]
          node _alu_sub_T_5 = mux(_alu_sub_T_3, _alu_sub_T_4, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 368:23]
          alu_sub <= _alu_sub_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 368:17]
        else :
          node _T_9 = asUInt(UInt<7>("h63")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
          node _T_10 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
          node _T_11 = eq(_T_9, _T_10) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
          when _T_11 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
            aluOP <= inst_R.func3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 371:15]
            branchEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 372:22]
            immv <= imm_B @[\\src\\main\\scala\\gcd\\rv_cpu.scala 373:14]
          else :
            node _T_12 = asUInt(UInt<6>("h37")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
            node _T_13 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
            node _T_14 = eq(_T_12, _T_13) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
            when _T_14 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
              immv <= imm_U @[\\src\\main\\scala\\gcd\\rv_cpu.scala 377:14]
              rs1 <= inst_R.rd @[\\src\\main\\scala\\gcd\\rv_cpu.scala 378:13]
            else :
              node _T_15 = asUInt(UInt<7>("h6f")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
              node _T_16 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
              node _T_17 = eq(_T_15, _T_16) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
              when _T_17 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 381:15]
                jumpEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 382:20]
                rs1 <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 383:13]
                immv <= imm_J @[\\src\\main\\scala\\gcd\\rv_cpu.scala 384:14]
                alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 385:22]
                storePC <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 386:17]
              else :
                node _T_18 = asUInt(UInt<7>("h67")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                node _T_19 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                node _T_20 = eq(_T_18, _T_19) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                when _T_20 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                  absjumpEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 389:23]
                  aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 390:15]
                  jumpEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 391:20]
                  immv <= imm_I @[\\src\\main\\scala\\gcd\\rv_cpu.scala 392:14]
                  alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 393:22]
                  storePC <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 394:17]
                else :
                  node _T_21 = asUInt(UInt<2>("h3")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                  node _T_22 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                  node _T_23 = eq(_T_21, _T_22) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                  when _T_23 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                    din_is_mem <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 397:20]
                    rs2 <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 398:13]
                    aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 399:15]
                    node _memoryWidth_T = bits(inst_I.func3, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 400:36]
                    memoryWidth <= _memoryWidth_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 400:21]
                    immv <= imm_I @[\\src\\main\\scala\\gcd\\rv_cpu.scala 401:14]
                    alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 402:22]
                  else :
                    node _T_24 = asUInt(UInt<6>("h23")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                    node _T_25 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                    node _T_26 = eq(_T_24, _T_25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                    when _T_26 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                      rd <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 405:12]
                      node _memoryWidth_T_1 = bits(inst_I.func3, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 407:36]
                      memoryWidth <= _memoryWidth_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 407:21]
                      aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 408:15]
                      immv <= imm_S @[\\src\\main\\scala\\gcd\\rv_cpu.scala 409:14]
                      alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 410:22]
                      writeEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 411:21]
                    else :
                      node _T_27 = asUInt(UInt<7>("h73")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                      node _T_28 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                      node _T_29 = eq(_T_27, _T_28) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                      when _T_29 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 358:16]
                        rs2 <= UInt<2>("h2") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 414:13]
                        rs1 <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 415:13]
                        node _must_halt_T = eq(inst_I.imm, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 416:34]
                        node _must_halt_T_1 = eq(inst_I.rd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 416:57]
                        node _must_halt_T_2 = and(_must_halt_T, _must_halt_T_1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 416:43]
                        node _must_halt_T_3 = eq(inst_I.rs1, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 416:82]
                        node _must_halt_T_4 = and(_must_halt_T_2, _must_halt_T_3) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 416:67]
                        node _must_halt_T_5 = eq(inst_I.func3, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 416:108]
                        node _must_halt_T_6 = and(_must_halt_T_4, _must_halt_T_5) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 416:91]
                        must_halt <= _must_halt_T_6 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 416:19]
    node _branch_target_T = mux(jumpEnable, alu.io.adderOut, immv) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 420:64]
    node _branch_target_T_1 = add(PC, _branch_target_T) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 420:59]
    node _branch_target_T_2 = tail(_branch_target_T_1, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 420:59]
    node _branch_target_T_3 = mux(absjumpEnable, alu.io.adderOut, _branch_target_T_2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 420:23]
    branch_target <= _branch_target_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 420:17]
    when state_exec : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 422:19]
      node _PC_T = and(branchEnable, alu.io.branchOut) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 424:43]
      node _PC_T_1 = or(jumpEnable, _PC_T) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 424:27]
      node _PC_T_2 = mux(_PC_T_1, branch_target, PC4) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 424:14]
      PC <= _PC_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 424:8]


