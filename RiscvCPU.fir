circuit RiscvCPU :
  module Alu :
    input clock : Clock
    input reset : Reset
    output io : { flip input1 : UInt<32>, flip input2 : UInt<32>, flip func3 : UInt<3>, out : UInt<32>}

    io.out <= UInt<1>("h0") @[rv_alu.scala 26:10]
    node _T = eq(UInt<1>("h0"), io.func3) @[rv_alu.scala 27:20]
    when _T : @[rv_alu.scala 27:20]
      node _io_out_T = add(io.input1, io.input2) @[rv_alu.scala 28:36]
      node _io_out_T_1 = tail(_io_out_T, 1) @[rv_alu.scala 28:36]
      io.out <= _io_out_T_1 @[rv_alu.scala 28:23]
    else :
      node _T_1 = eq(UInt<3>("h7"), io.func3) @[rv_alu.scala 27:20]
      when _T_1 : @[rv_alu.scala 27:20]
        node _io_out_T_2 = and(io.input1, io.input2) @[rv_alu.scala 29:36]
        io.out <= _io_out_T_2 @[rv_alu.scala 29:23]
      else :
        node _T_2 = eq(UInt<3>("h6"), io.func3) @[rv_alu.scala 27:20]
        when _T_2 : @[rv_alu.scala 27:20]
          node _io_out_T_3 = xor(io.input1, io.input2) @[rv_alu.scala 30:36]
          io.out <= _io_out_T_3 @[rv_alu.scala 30:23]
        else :
          node _T_3 = eq(UInt<3>("h4"), io.func3) @[rv_alu.scala 27:20]
          when _T_3 : @[rv_alu.scala 27:20]
            node _io_out_T_4 = or(io.input1, io.input2) @[rv_alu.scala 31:36]
            io.out <= _io_out_T_4 @[rv_alu.scala 31:23]

  module RegisterBank :
    input clock : Clock
    input reset : Reset
    output io : { flip din : UInt<32>, flip rsd : UInt<5>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, outrs1 : UInt<32>, outrs2 : UInt<32>}

    reg mem : UInt<32>[32], clock with :
      reset => (UInt<1>("h0"), mem) @[rv_alu.scala 121:16]
    node rsdzero = eq(io.rsd, UInt<1>("h0")) @[rv_alu.scala 123:24]
    node rs1zero = eq(io.rs1, UInt<1>("h0")) @[rv_alu.scala 124:24]
    node rs2zero = eq(io.rs2, UInt<1>("h0")) @[rv_alu.scala 125:24]
    node _T = eq(rsdzero, UInt<1>("h0")) @[rv_alu.scala 127:8]
    when _T : @[rv_alu.scala 127:17]
      mem[io.rsd] <= io.din @[rv_alu.scala 128:17]
    node _io_outrs1_T = mux(rs1zero, UInt<1>("h0"), mem[io.rs1]) @[rv_alu.scala 131:19]
    io.outrs1 <= _io_outrs1_T @[rv_alu.scala 131:13]
    node _io_outrs2_T = mux(rs2zero, UInt<1>("h0"), mem[io.rs2]) @[rv_alu.scala 132:19]
    io.outrs2 <= _io_outrs2_T @[rv_alu.scala 132:13]

  module RiscvCPU :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip mIn : UInt<32>, mWrite : UInt<1>, mOut : UInt<32>, mAddr : UInt<10>, halted : UInt<1>, db_r1 : UInt<32>, db_r2 : UInt<32>, db_pc : UInt<32>}

    inst alu of Alu @[rv_alu.scala 163:19]
    alu.clock <= clock
    alu.reset <= reset
    inst regs of RegisterBank @[rv_alu.scala 164:20]
    regs.clock <= clock
    regs.reset <= reset
    reg PC : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[rv_alu.scala 166:19]
    node _PC4_T = add(PC, UInt<3>("h4")) @[rv_alu.scala 168:16]
    node PC4 = tail(_PC4_T, 1) @[rv_alu.scala 168:16]
    reg state_start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[rv_alu.scala 170:29]
    reg state_fetch : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 171:29]
    reg state_fetch2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 172:29]
    reg state_decode : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 173:29]
    reg state_exec : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 174:27]
    reg state_halt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 175:27]
    reg rd : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[rv_alu.scala 178:20]
    reg rs1 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[rv_alu.scala 179:20]
    reg rs2 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[rv_alu.scala 180:20]
    reg immv : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[rv_alu.scala 181:21]
    reg aluOP : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[rv_alu.scala 182:22]
    reg din_is_alu : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 183:27]
    reg alu2_use_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 184:29]
    reg branchEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[rv_alu.scala 186:29]
    wire lui_mix : UInt<32> @[rv_alu.scala 189:21]
    wire must_halt : UInt<1> @[rv_alu.scala 190:23]
    wire branch_target : UInt<32> @[rv_alu.scala 191:27]
    wire inst : { rest : UInt<25>, opcode : UInt<7>} @[rv_alu.scala 194:29]
    wire _inst_WIRE : UInt<32>
    _inst_WIRE <= io.mIn
    node _inst_T = bits(_inst_WIRE, 6, 0) @[rv_alu.scala 194:29]
    inst.opcode <= _inst_T @[rv_alu.scala 194:29]
    node _inst_T_1 = bits(_inst_WIRE, 31, 7) @[rv_alu.scala 194:29]
    inst.rest <= _inst_T_1 @[rv_alu.scala 194:29]
    wire inst_I : { imm : UInt<12>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[rv_alu.scala 195:31]
    wire _inst_I_WIRE : UInt<32>
    _inst_I_WIRE <= io.mIn
    node _inst_I_T = bits(_inst_I_WIRE, 6, 0) @[rv_alu.scala 195:31]
    inst_I.opcode <= _inst_I_T @[rv_alu.scala 195:31]
    node _inst_I_T_1 = bits(_inst_I_WIRE, 11, 7) @[rv_alu.scala 195:31]
    inst_I.rd <= _inst_I_T_1 @[rv_alu.scala 195:31]
    node _inst_I_T_2 = bits(_inst_I_WIRE, 14, 12) @[rv_alu.scala 195:31]
    inst_I.func3 <= _inst_I_T_2 @[rv_alu.scala 195:31]
    node _inst_I_T_3 = bits(_inst_I_WIRE, 19, 15) @[rv_alu.scala 195:31]
    inst_I.rs1 <= _inst_I_T_3 @[rv_alu.scala 195:31]
    node _inst_I_T_4 = bits(_inst_I_WIRE, 31, 20) @[rv_alu.scala 195:31]
    inst_I.imm <= _inst_I_T_4 @[rv_alu.scala 195:31]
    wire inst_R : { func7 : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[rv_alu.scala 196:31]
    wire _inst_R_WIRE : UInt<32>
    _inst_R_WIRE <= io.mIn
    node _inst_R_T = bits(_inst_R_WIRE, 6, 0) @[rv_alu.scala 196:31]
    inst_R.opcode <= _inst_R_T @[rv_alu.scala 196:31]
    node _inst_R_T_1 = bits(_inst_R_WIRE, 11, 7) @[rv_alu.scala 196:31]
    inst_R.rd <= _inst_R_T_1 @[rv_alu.scala 196:31]
    node _inst_R_T_2 = bits(_inst_R_WIRE, 14, 12) @[rv_alu.scala 196:31]
    inst_R.func3 <= _inst_R_T_2 @[rv_alu.scala 196:31]
    node _inst_R_T_3 = bits(_inst_R_WIRE, 19, 15) @[rv_alu.scala 196:31]
    inst_R.rs1 <= _inst_R_T_3 @[rv_alu.scala 196:31]
    node _inst_R_T_4 = bits(_inst_R_WIRE, 24, 20) @[rv_alu.scala 196:31]
    inst_R.rs2 <= _inst_R_T_4 @[rv_alu.scala 196:31]
    node _inst_R_T_5 = bits(_inst_R_WIRE, 31, 25) @[rv_alu.scala 196:31]
    inst_R.func7 <= _inst_R_T_5 @[rv_alu.scala 196:31]
    wire inst_U : { imm : UInt<20>, rd : UInt<5>, opcode : UInt<7>} @[rv_alu.scala 197:31]
    wire _inst_U_WIRE : UInt<32>
    _inst_U_WIRE <= io.mIn
    node _inst_U_T = bits(_inst_U_WIRE, 6, 0) @[rv_alu.scala 197:31]
    inst_U.opcode <= _inst_U_T @[rv_alu.scala 197:31]
    node _inst_U_T_1 = bits(_inst_U_WIRE, 11, 7) @[rv_alu.scala 197:31]
    inst_U.rd <= _inst_U_T_1 @[rv_alu.scala 197:31]
    node _inst_U_T_2 = bits(_inst_U_WIRE, 31, 12) @[rv_alu.scala 197:31]
    inst_U.imm <= _inst_U_T_2 @[rv_alu.scala 197:31]
    wire inst_B : { imm12 : UInt<1>, imm10_5 : UInt<6>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, im41 : UInt<4>, im11 : UInt<1>, opcode : UInt<7>} @[rv_alu.scala 198:31]
    wire _inst_B_WIRE : UInt<32>
    _inst_B_WIRE <= io.mIn
    node _inst_B_T = bits(_inst_B_WIRE, 6, 0) @[rv_alu.scala 198:31]
    inst_B.opcode <= _inst_B_T @[rv_alu.scala 198:31]
    node _inst_B_T_1 = bits(_inst_B_WIRE, 7, 7) @[rv_alu.scala 198:31]
    inst_B.im11 <= _inst_B_T_1 @[rv_alu.scala 198:31]
    node _inst_B_T_2 = bits(_inst_B_WIRE, 11, 8) @[rv_alu.scala 198:31]
    inst_B.im41 <= _inst_B_T_2 @[rv_alu.scala 198:31]
    node _inst_B_T_3 = bits(_inst_B_WIRE, 14, 12) @[rv_alu.scala 198:31]
    inst_B.func3 <= _inst_B_T_3 @[rv_alu.scala 198:31]
    node _inst_B_T_4 = bits(_inst_B_WIRE, 19, 15) @[rv_alu.scala 198:31]
    inst_B.rs1 <= _inst_B_T_4 @[rv_alu.scala 198:31]
    node _inst_B_T_5 = bits(_inst_B_WIRE, 24, 20) @[rv_alu.scala 198:31]
    inst_B.rs2 <= _inst_B_T_5 @[rv_alu.scala 198:31]
    node _inst_B_T_6 = bits(_inst_B_WIRE, 30, 25) @[rv_alu.scala 198:31]
    inst_B.imm10_5 <= _inst_B_T_6 @[rv_alu.scala 198:31]
    node _inst_B_T_7 = bits(_inst_B_WIRE, 31, 31) @[rv_alu.scala 198:31]
    inst_B.imm12 <= _inst_B_T_7 @[rv_alu.scala 198:31]
    wire inst_J : { im20 : UInt<1>, im10_1 : UInt<10>, im11 : UInt<1>, im19_12 : UInt<8>, rd : UInt<5>, opcode : UInt<7>} @[rv_alu.scala 199:31]
    wire _inst_J_WIRE : UInt<32>
    _inst_J_WIRE <= io.mIn
    node _inst_J_T = bits(_inst_J_WIRE, 6, 0) @[rv_alu.scala 199:31]
    inst_J.opcode <= _inst_J_T @[rv_alu.scala 199:31]
    node _inst_J_T_1 = bits(_inst_J_WIRE, 11, 7) @[rv_alu.scala 199:31]
    inst_J.rd <= _inst_J_T_1 @[rv_alu.scala 199:31]
    node _inst_J_T_2 = bits(_inst_J_WIRE, 19, 12) @[rv_alu.scala 199:31]
    inst_J.im19_12 <= _inst_J_T_2 @[rv_alu.scala 199:31]
    node _inst_J_T_3 = bits(_inst_J_WIRE, 20, 20) @[rv_alu.scala 199:31]
    inst_J.im11 <= _inst_J_T_3 @[rv_alu.scala 199:31]
    node _inst_J_T_4 = bits(_inst_J_WIRE, 30, 21) @[rv_alu.scala 199:31]
    inst_J.im10_1 <= _inst_J_T_4 @[rv_alu.scala 199:31]
    node _inst_J_T_5 = bits(_inst_J_WIRE, 31, 31) @[rv_alu.scala 199:31]
    inst_J.im20 <= _inst_J_T_5 @[rv_alu.scala 199:31]
    wire sign : UInt<1> @[rv_alu.scala 202:18]
    node _sign_T = bits(io.mIn, 31, 31) @[rv_alu.scala 203:17]
    sign <= _sign_T @[rv_alu.scala 203:8]
    wire imm_I : UInt<32> @[rv_alu.scala 205:20]
    node _imm_I_T = asUInt(asSInt(UInt<20>("hfffff"))) @[rv_alu.scala 206:32]
    node _imm_I_T_1 = mux(sign, _imm_I_T, UInt<20>("h0")) @[rv_alu.scala 206:15]
    node _imm_I_T_2 = cat(_imm_I_T_1, inst_I.imm) @[rv_alu.scala 206:52]
    imm_I <= _imm_I_T_2 @[rv_alu.scala 206:9]
    wire imm_B : UInt<32> @[rv_alu.scala 208:20]
    node _imm_B_T = asUInt(asSInt(UInt<20>("hfffff"))) @[rv_alu.scala 209:32]
    node _imm_B_T_1 = mux(sign, _imm_B_T, UInt<20>("h0")) @[rv_alu.scala 209:15]
    node _imm_B_T_2 = cat(inst_B.im11, inst_B.imm10_5) @[rv_alu.scala 209:68]
    node _imm_B_T_3 = cat(_imm_B_T_2, inst_B.im41) @[rv_alu.scala 209:86]
    node _imm_B_T_4 = cat(_imm_B_T_3, UInt<1>("h0")) @[rv_alu.scala 209:101]
    node _imm_B_T_5 = cat(_imm_B_T_1, _imm_B_T_4) @[rv_alu.scala 209:52]
    imm_B <= _imm_B_T_5 @[rv_alu.scala 209:9]
    wire imm_U : UInt<32> @[rv_alu.scala 211:20]
    node _imm_U_T = cat(inst_U.imm, UInt<12>("h0")) @[rv_alu.scala 212:23]
    imm_U <= _imm_U_T @[rv_alu.scala 212:9]
    wire imm_J : UInt<32> @[rv_alu.scala 214:20]
    node _imm_J_T = asUInt(asSInt(UInt<12>("hfff"))) @[rv_alu.scala 215:32]
    node _imm_J_T_1 = mux(sign, _imm_J_T, UInt<12>("h0")) @[rv_alu.scala 215:15]
    node _imm_J_T_2 = cat(_imm_J_T_1, inst_J.im19_12) @[rv_alu.scala 215:52]
    node _imm_J_T_3 = cat(_imm_J_T_2, inst_J.im11) @[rv_alu.scala 215:70]
    node _imm_J_T_4 = cat(_imm_J_T_3, inst_J.im10_1) @[rv_alu.scala 215:85]
    node _imm_J_T_5 = cat(_imm_J_T_4, UInt<1>("h0")) @[rv_alu.scala 215:103]
    imm_J <= _imm_J_T_5 @[rv_alu.scala 215:9]
    wire _op_WIRE : UInt<7> @[rv_alu.scala 222:18]
    _op_WIRE <= inst.opcode @[rv_alu.scala 222:18]
    wire op : UInt<7> @[rv_alu.scala 222:18]
    op <= _op_WIRE @[rv_alu.scala 222:18]
    state_start <= UInt<1>("h0") @[rv_alu.scala 224:15]
    node _state_fetch_T = or(state_exec, state_start) @[rv_alu.scala 225:29]
    state_fetch <= _state_fetch_T @[rv_alu.scala 225:15]
    state_decode <= state_fetch @[rv_alu.scala 227:16]
    node _state_exec_T = mux(must_halt, UInt<1>("h0"), state_decode) @[rv_alu.scala 228:21]
    state_exec <= _state_exec_T @[rv_alu.scala 228:14]
    node _state_halt_T = or(must_halt, state_halt) @[rv_alu.scala 229:26]
    state_halt <= _state_halt_T @[rv_alu.scala 229:14]
    io.halted <= state_halt @[rv_alu.scala 231:13]
    io.mWrite <= UInt<1>("h0") @[rv_alu.scala 232:13]
    node _io_mAddr_T = or(state_fetch, state_start) @[rv_alu.scala 233:31]
    node _io_mAddr_T_1 = asUInt(asSInt(UInt<32>("hffffffff"))) @[rv_alu.scala 233:61]
    node _io_mAddr_T_2 = mux(_io_mAddr_T, PC, _io_mAddr_T_1) @[rv_alu.scala 233:18]
    io.mAddr <= _io_mAddr_T_2 @[rv_alu.scala 233:12]
    io.mOut <= UInt<1>("h0") @[rv_alu.scala 234:11]
    io.halted <= state_halt @[rv_alu.scala 235:13]
    io.db_pc <= PC @[rv_alu.scala 237:12]
    io.db_r1 <= regs.io.outrs1 @[rv_alu.scala 238:12]
    io.db_r2 <= regs.io.outrs2 @[rv_alu.scala 239:12]
    alu.io.input1 <= regs.io.outrs1 @[rv_alu.scala 241:17]
    node _alu_io_input2_T = mux(alu2_use_reg, regs.io.outrs2, immv) @[rv_alu.scala 242:23]
    alu.io.input2 <= _alu_io_input2_T @[rv_alu.scala 242:17]
    alu.io.func3 <= aluOP @[rv_alu.scala 243:16]
    node _regs_io_din_T = mux(din_is_alu, alu.io.out, lui_mix) @[rv_alu.scala 245:21]
    regs.io.din <= _regs_io_din_T @[rv_alu.scala 245:15]
    node _regs_io_rs1_T = mux(state_halt, UInt<1>("h1"), rs1) @[rv_alu.scala 247:21]
    regs.io.rs1 <= _regs_io_rs1_T @[rv_alu.scala 247:15]
    node _regs_io_rs2_T = mux(state_halt, UInt<2>("h2"), rs2) @[rv_alu.scala 248:21]
    regs.io.rs2 <= _regs_io_rs2_T @[rv_alu.scala 248:15]
    node _regs_io_rsd_T = mux(state_exec, rd, UInt<1>("h0")) @[rv_alu.scala 249:21]
    regs.io.rsd <= _regs_io_rsd_T @[rv_alu.scala 249:15]
    node _lui_mix_T = bits(immv, 31, 12) @[rv_alu.scala 251:18]
    node _lui_mix_T_1 = bits(regs.io.outrs1, 11, 0) @[rv_alu.scala 251:43]
    node _lui_mix_T_2 = cat(_lui_mix_T, _lui_mix_T_1) @[rv_alu.scala 251:26]
    lui_mix <= _lui_mix_T_2 @[rv_alu.scala 251:11]
    must_halt <= UInt<1>("h0") @[rv_alu.scala 252:13]
    node _branch_target_T = add(PC, immv) @[rv_alu.scala 256:23]
    node _branch_target_T_1 = tail(_branch_target_T, 1) @[rv_alu.scala 256:23]
    branch_target <= _branch_target_T_1 @[rv_alu.scala 256:17]
    node alu_eq = eq(regs.io.outrs1, regs.io.outrs2) @[rv_alu.scala 258:31]
    node alu_lt = lt(regs.io.outrs1, regs.io.outrs2) @[rv_alu.scala 259:31]
    alu2_use_reg <= alu2_use_reg @[rv_alu.scala 261:16]
    din_is_alu <= din_is_alu @[rv_alu.scala 263:14]
    when state_decode : @[rv_alu.scala 264:21]
      aluOP <= inst_R.func3 @[rv_alu.scala 267:11]
      node _must_halt_T = eq(op, UInt<7>("h73")) @[rv_alu.scala 269:22]
      node _must_halt_T_1 = eq(inst_I.imm, UInt<1>("h1")) @[rv_alu.scala 269:53]
      node _must_halt_T_2 = and(_must_halt_T, _must_halt_T_1) @[rv_alu.scala 269:38]
      node _must_halt_T_3 = eq(inst_I.rd, UInt<1>("h0")) @[rv_alu.scala 269:76]
      node _must_halt_T_4 = and(_must_halt_T_2, _must_halt_T_3) @[rv_alu.scala 269:62]
      node _must_halt_T_5 = eq(inst_I.rs1, UInt<1>("h0")) @[rv_alu.scala 269:101]
      node _must_halt_T_6 = and(_must_halt_T_4, _must_halt_T_5) @[rv_alu.scala 269:86]
      node _must_halt_T_7 = eq(inst_I.func3, UInt<1>("h0")) @[rv_alu.scala 269:127]
      node _must_halt_T_8 = and(_must_halt_T_6, _must_halt_T_7) @[rv_alu.scala 269:110]
      must_halt <= _must_halt_T_8 @[rv_alu.scala 269:15]
      branchEnable <= UInt<1>("h0") @[rv_alu.scala 271:18]
      immv <= UInt<1>("h0") @[rv_alu.scala 272:10]
      rs2 <= inst_R.rs2 @[rv_alu.scala 273:9]
      rs1 <= inst_R.rs1 @[rv_alu.scala 274:9]
      rd <= inst_R.rd @[rv_alu.scala 275:9]
      node _din_is_alu_T = eq(op, UInt<6>("h37")) @[rv_alu.scala 277:26]
      node _din_is_alu_T_1 = mux(_din_is_alu_T, UInt<1>("h0"), UInt<1>("h1")) @[rv_alu.scala 277:22]
      din_is_alu <= _din_is_alu_T_1 @[rv_alu.scala 277:16]
      alu2_use_reg <= UInt<1>("h1") @[rv_alu.scala 278:18]
      node _T = asUInt(UInt<5>("h13")) @[rv_alu.scala 279:16]
      node _T_1 = asUInt(op) @[rv_alu.scala 279:16]
      node _T_2 = eq(_T, _T_1) @[rv_alu.scala 279:16]
      when _T_2 : @[rv_alu.scala 279:16]
        rs2 <= UInt<1>("h0") @[rv_alu.scala 281:13]
        immv <= imm_I @[rv_alu.scala 283:14]
        alu2_use_reg <= UInt<1>("h0") @[rv_alu.scala 284:22]
      else :
        node _T_3 = asUInt(UInt<7>("h63")) @[rv_alu.scala 279:16]
        node _T_4 = asUInt(op) @[rv_alu.scala 279:16]
        node _T_5 = eq(_T_3, _T_4) @[rv_alu.scala 279:16]
        when _T_5 : @[rv_alu.scala 279:16]
          branchEnable <= UInt<1>("h1") @[rv_alu.scala 287:22]
          immv <= imm_B @[rv_alu.scala 288:14]
        else :
          node _T_6 = asUInt(UInt<6>("h37")) @[rv_alu.scala 279:16]
          node _T_7 = asUInt(op) @[rv_alu.scala 279:16]
          node _T_8 = eq(_T_6, _T_7) @[rv_alu.scala 279:16]
          when _T_8 : @[rv_alu.scala 279:16]
            immv <= imm_U @[rv_alu.scala 291:14]
            rs1 <= inst_R.rd @[rv_alu.scala 292:13]
          else :
            node _T_9 = asUInt(UInt<7>("h6f")) @[rv_alu.scala 279:16]
            node _T_10 = asUInt(op) @[rv_alu.scala 279:16]
            node _T_11 = eq(_T_9, _T_10) @[rv_alu.scala 279:16]
            when _T_11 : @[rv_alu.scala 279:16]
              aluOP <= UInt<2>("h2") @[rv_alu.scala 295:15]
              branchEnable <= UInt<1>("h1") @[rv_alu.scala 296:22]
              immv <= imm_J @[rv_alu.scala 297:14]
    wire branchCheck : UInt<1> @[rv_alu.scala 302:25]
    branchCheck <= UInt<1>("h0") @[rv_alu.scala 303:15]
    node _T_12 = eq(UInt<1>("h0"), aluOP) @[rv_alu.scala 304:17]
    when _T_12 : @[rv_alu.scala 304:17]
      branchCheck <= alu_eq @[rv_alu.scala 306:19]
    else :
      node _T_13 = eq(UInt<1>("h1"), aluOP) @[rv_alu.scala 304:17]
      when _T_13 : @[rv_alu.scala 304:17]
        node _branchCheck_T = not(alu_eq) @[rv_alu.scala 309:22]
        branchCheck <= _branchCheck_T @[rv_alu.scala 309:19]
      else :
        node _T_14 = eq(UInt<2>("h2"), aluOP) @[rv_alu.scala 304:17]
        when _T_14 : @[rv_alu.scala 304:17]
          branchCheck <= UInt<1>("h1") @[rv_alu.scala 312:19]
        else :
          node _T_15 = eq(UInt<3>("h4"), aluOP) @[rv_alu.scala 304:17]
          when _T_15 : @[rv_alu.scala 304:17]
            branchCheck <= alu_lt @[rv_alu.scala 315:19]
          else :
            node _T_16 = eq(UInt<3>("h5"), aluOP) @[rv_alu.scala 304:17]
            when _T_16 : @[rv_alu.scala 304:17]
              node _branchCheck_T_1 = not(alu_lt) @[rv_alu.scala 318:22]
              branchCheck <= _branchCheck_T_1 @[rv_alu.scala 318:19]
            else :
              node _T_17 = eq(UInt<3>("h6"), aluOP) @[rv_alu.scala 304:17]
              when _T_17 : @[rv_alu.scala 304:17]
                branchCheck <= alu_lt @[rv_alu.scala 321:19]
              else :
                node _T_18 = eq(UInt<3>("h7"), aluOP) @[rv_alu.scala 304:17]
                when _T_18 : @[rv_alu.scala 304:17]
                  node _branchCheck_T_2 = not(alu_lt) @[rv_alu.scala 324:22]
                  branchCheck <= _branchCheck_T_2 @[rv_alu.scala 324:19]
    when state_exec : @[rv_alu.scala 328:19]
      node _PC_T = and(branchEnable, branchCheck) @[rv_alu.scala 331:28]
      node _PC_T_1 = mux(_PC_T, branch_target, PC4) @[rv_alu.scala 331:14]
      PC <= _PC_T_1 @[rv_alu.scala 331:8]

