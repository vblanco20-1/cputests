FIRRTL version 1.2.0
circuit RiscvCPU :
  module Alu :
    input clock : Clock
    input reset : Reset
    output io : { flip input1 : UInt<32>, flip input2 : UInt<32>, flip func3 : UInt<3>, out : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_alu.scala 14:14]

    io.out <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_alu.scala 20:10]
    node _inputMSB_T = bits(io.input1, 31, 31) @[\\src\\main\\scala\\gcd\\rv_alu.scala 23:31]
    node _inputMSB_T_1 = bits(io.input2, 10, 10) @[\\src\\main\\scala\\gcd\\rv_alu.scala 23:47]
    node _inputMSB_T_2 = and(_inputMSB_T, _inputMSB_T_1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 23:36]
    node _inputMSB_T_3 = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_alu.scala 23:65]
    node inputMSB = mux(_inputMSB_T_2, _inputMSB_T_3, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_alu.scala 23:21]
    wire rbarrel : UInt<32>[5] @[\\src\\main\\scala\\gcd\\rv_alu.scala 26:21]
    node _rbarrel_0_T = bits(io.input2, 0, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:30]
    node _rbarrel_0_T_1 = cat(inputMSB, io.input1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:44]
    node _rbarrel_0_T_2 = shr(_rbarrel_0_T_1, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:57]
    node _rbarrel_0_T_3 = mux(_rbarrel_0_T, _rbarrel_0_T_2, io.input1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:20]
    rbarrel[0] <= _rbarrel_0_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 27:14]
    node _rbarrel_1_T = bits(io.input2, 1, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:30]
    node _rbarrel_1_T_1 = cat(inputMSB, rbarrel[0]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:44]
    node _rbarrel_1_T_2 = shr(_rbarrel_1_T_1, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:58]
    node _rbarrel_1_T_3 = mux(_rbarrel_1_T, _rbarrel_1_T_2, rbarrel[0]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:20]
    rbarrel[1] <= _rbarrel_1_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 28:14]
    node _rbarrel_2_T = bits(io.input2, 2, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 29:30]
    node _rbarrel_2_T_1 = cat(inputMSB, rbarrel[1]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 29:44]
    node _rbarrel_2_T_2 = shr(_rbarrel_2_T_1, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 29:58]
    node _rbarrel_2_T_3 = mux(_rbarrel_2_T, _rbarrel_2_T_2, rbarrel[1]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 29:20]
    rbarrel[2] <= _rbarrel_2_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 29:14]
    node _rbarrel_3_T = bits(io.input2, 3, 3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 30:30]
    node _rbarrel_3_T_1 = cat(inputMSB, rbarrel[2]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 30:44]
    node _rbarrel_3_T_2 = shr(_rbarrel_3_T_1, 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 30:58]
    node _rbarrel_3_T_3 = mux(_rbarrel_3_T, _rbarrel_3_T_2, rbarrel[2]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 30:20]
    rbarrel[3] <= _rbarrel_3_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 30:14]
    node _rbarrel_4_T = bits(io.input2, 4, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 31:30]
    node _rbarrel_4_T_1 = cat(inputMSB, rbarrel[3]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 31:44]
    node _rbarrel_4_T_2 = shr(_rbarrel_4_T_1, 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 31:58]
    node _rbarrel_4_T_3 = mux(_rbarrel_4_T, _rbarrel_4_T_2, rbarrel[3]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 31:20]
    rbarrel[4] <= _rbarrel_4_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 31:14]
    wire lbarrel : UInt<32>[5] @[\\src\\main\\scala\\gcd\\rv_alu.scala 34:21]
    node _lbarrel_0_T = bits(io.input2, 0, 0) @[\\src\\main\\scala\\gcd\\rv_alu.scala 35:30]
    node _lbarrel_0_T_1 = shl(io.input1, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 35:45]
    node _lbarrel_0_T_2 = mux(_lbarrel_0_T, _lbarrel_0_T_1, io.input1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 35:20]
    lbarrel[0] <= _lbarrel_0_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 35:14]
    node _lbarrel_1_T = bits(io.input2, 1, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 36:30]
    node _lbarrel_1_T_1 = shl(lbarrel[0], 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 36:46]
    node _lbarrel_1_T_2 = mux(_lbarrel_1_T, _lbarrel_1_T_1, lbarrel[0]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 36:20]
    lbarrel[1] <= _lbarrel_1_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 36:14]
    node _lbarrel_2_T = bits(io.input2, 2, 2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 37:30]
    node _lbarrel_2_T_1 = shl(lbarrel[1], 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 37:46]
    node _lbarrel_2_T_2 = mux(_lbarrel_2_T, _lbarrel_2_T_1, lbarrel[1]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 37:20]
    lbarrel[2] <= _lbarrel_2_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 37:14]
    node _lbarrel_3_T = bits(io.input2, 3, 3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 38:30]
    node _lbarrel_3_T_1 = shl(lbarrel[2], 8) @[\\src\\main\\scala\\gcd\\rv_alu.scala 38:46]
    node _lbarrel_3_T_2 = mux(_lbarrel_3_T, _lbarrel_3_T_1, lbarrel[2]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 38:20]
    lbarrel[3] <= _lbarrel_3_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 38:14]
    node _lbarrel_4_T = bits(io.input2, 4, 4) @[\\src\\main\\scala\\gcd\\rv_alu.scala 39:30]
    node _lbarrel_4_T_1 = shl(lbarrel[3], 16) @[\\src\\main\\scala\\gcd\\rv_alu.scala 39:46]
    node _lbarrel_4_T_2 = mux(_lbarrel_4_T, _lbarrel_4_T_1, lbarrel[3]) @[\\src\\main\\scala\\gcd\\rv_alu.scala 39:20]
    lbarrel[4] <= _lbarrel_4_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 39:14]
    node _T = eq(UInt<1>("h0"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
    when _T : @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
      node _io_out_T = add(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 43:36]
      node _io_out_T_1 = tail(_io_out_T, 1) @[\\src\\main\\scala\\gcd\\rv_alu.scala 43:36]
      io.out <= _io_out_T_1 @[\\src\\main\\scala\\gcd\\rv_alu.scala 43:23]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
      when _T_1 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
        io.out <= rbarrel[4] @[\\src\\main\\scala\\gcd\\rv_alu.scala 44:23]
      else :
        node _T_2 = eq(UInt<3>("h5"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
        when _T_2 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
          io.out <= lbarrel[4] @[\\src\\main\\scala\\gcd\\rv_alu.scala 45:23]
        else :
          node _T_3 = eq(UInt<3>("h7"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
          when _T_3 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
            node _io_out_T_2 = and(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 46:36]
            io.out <= _io_out_T_2 @[\\src\\main\\scala\\gcd\\rv_alu.scala 46:23]
          else :
            node _T_4 = eq(UInt<3>("h6"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
            when _T_4 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
              node _io_out_T_3 = xor(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 47:36]
              io.out <= _io_out_T_3 @[\\src\\main\\scala\\gcd\\rv_alu.scala 47:23]
            else :
              node _T_5 = eq(UInt<3>("h4"), io.func3) @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
              when _T_5 : @[\\src\\main\\scala\\gcd\\rv_alu.scala 42:20]
                node _io_out_T_4 = or(io.input1, io.input2) @[\\src\\main\\scala\\gcd\\rv_alu.scala 48:36]
                io.out <= _io_out_T_4 @[\\src\\main\\scala\\gcd\\rv_alu.scala 48:23]


  module RegisterBank :
    input clock : Clock
    input reset : Reset
    output io : { flip din : UInt<32>, flip rsd : UInt<5>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, outrs1 : UInt<32>, outrs2 : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 154:14]

    cmem mem1 : UInt<32> [32] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 177:17]
    cmem mem2 : UInt<32> [32] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 178:17]
    node rsdzero = eq(io.rsd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 180:24]
    node _T = eq(rsdzero, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 182:8]
    when _T : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 182:18]
      infer mport MPORT = mem1[io.rsd], clock @[\\src\\main\\scala\\gcd\\rv_cpu.scala 183:9]
      MPORT <= io.din @[\\src\\main\\scala\\gcd\\rv_cpu.scala 183:18]
      infer mport MPORT_1 = mem2[io.rsd], clock @[\\src\\main\\scala\\gcd\\rv_cpu.scala 184:9]
      MPORT_1 <= io.din @[\\src\\main\\scala\\gcd\\rv_cpu.scala 184:18]
    infer mport io_outrs1_MPORT = mem1[io.rs1], clock @[\\src\\main\\scala\\gcd\\rv_cpu.scala 187:20]
    io.outrs1 <= io_outrs1_MPORT @[\\src\\main\\scala\\gcd\\rv_cpu.scala 187:13]
    infer mport io_outrs2_MPORT = mem2[io.rs2], clock @[\\src\\main\\scala\\gcd\\rv_cpu.scala 188:20]
    io.outrs2 <= io_outrs2_MPORT @[\\src\\main\\scala\\gcd\\rv_cpu.scala 188:13]

  module MemShift :
    input clock : Clock
    input reset : Reset
    output io : { flip shift : UInt<2>, flip in : UInt<32>, out : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 108:14]

    wire vin : UInt<8>[4] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 115:17]
    wire vout : UInt<8>[4] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 116:19]
    node _vin_0_T = bits(io.in, 7, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 118:18]
    vin[0] <= _vin_0_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 118:10]
    node _vin_1_T = bits(io.in, 15, 8) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 119:18]
    vin[1] <= _vin_1_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 119:10]
    node _vin_2_T = bits(io.in, 23, 16) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 120:18]
    vin[2] <= _vin_2_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 120:10]
    node _vin_3_T = bits(io.in, 31, 24) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 121:18]
    vin[3] <= _vin_3_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 121:10]
    vout <= vin @[\\src\\main\\scala\\gcd\\rv_cpu.scala 124:8]
    node io_out_lo = cat(vout[1], vout[0]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 126:18]
    node io_out_hi = cat(vout[3], vout[2]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 126:18]
    node _io_out_T = cat(io_out_hi, io_out_lo) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 126:18]
    io.out <= _io_out_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 126:10]
    node _T = eq(UInt<1>("h0"), io.shift) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 127:20]
    when _T : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 127:20]
      vout <= vin @[\\src\\main\\scala\\gcd\\rv_cpu.scala 130:12]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.shift) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 127:20]
      when _T_1 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 127:20]
        vout[0] <= vin[3] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 133:15]
        vout[1] <= vin[0] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 134:15]
        vout[2] <= vin[1] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 135:15]
        vout[3] <= vin[2] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 136:15]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.shift) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 127:20]
        when _T_2 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 127:20]
          vout[0] <= vin[2] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 139:15]
          vout[1] <= vin[3] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 140:15]
          vout[2] <= vin[0] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 141:15]
          vout[3] <= vin[1] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 142:15]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.shift) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 127:20]
          when _T_3 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 127:20]
            vout[0] <= vin[1] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 145:15]
            vout[1] <= vin[2] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 146:15]
            vout[2] <= vin[3] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 147:15]
            vout[3] <= vin[0] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 148:15]


  module RiscvCPU :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip mIn : UInt<32>, mWrite : UInt<1>, mMask : UInt<1>[4], mOut : UInt<32>, mAddr : UInt<30>, halted : UInt<1>, db_r1 : UInt<32>, db_r2 : UInt<32>, db_pc : UInt<32>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 208:14]

    inst alu of Alu @[\\src\\main\\scala\\gcd\\rv_cpu.scala 220:19]
    alu.clock <= clock
    alu.reset <= reset
    inst regs of RegisterBank @[\\src\\main\\scala\\gcd\\rv_cpu.scala 221:20]
    regs.clock <= clock
    regs.reset <= reset
    inst mshift of MemShift @[\\src\\main\\scala\\gcd\\rv_cpu.scala 222:22]
    mshift.clock <= clock
    mshift.reset <= reset
    reg PC : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 223:19]
    node _PC4_T = add(PC, UInt<3>("h4")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 225:16]
    node PC4 = tail(_PC4_T, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 225:16]
    reg state_start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 227:29]
    reg state_fetch : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 228:29]
    reg state_fetch2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 229:29]
    reg state_decode : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 230:29]
    reg state_exec : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 231:27]
    reg state_halt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 232:27]
    reg rd : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 235:19]
    reg rs1 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 236:19]
    reg rs2 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 237:20]
    reg savedOp : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 238:24]
    reg immv : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 239:21]
    reg aluOP : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 240:22]
    reg branchOP : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 241:25]
    reg memOP : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 242:22]
    reg din_is_alu : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 243:27]
    reg din_is_mem : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 244:27]
    reg alu2_use_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 245:29]
    reg branchEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 247:29]
    reg jumpEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 248:27]
    reg absjumpEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 249:30]
    reg storePC : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 250:24]
    reg writeEnable : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 251:28]
    wire writeMask : UInt<1>[4] @[\\src\\main\\scala\\gcd\\rv_cpu.scala 252:23]
    wire lui_mix : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 254:21]
    wire must_halt : UInt<1> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 255:23]
    wire branch_target : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 256:27]
    wire instruction : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 258:25]
    node _instruction_T = mux(state_decode, io.mIn, savedOp) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 259:21]
    instruction <= _instruction_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 259:15]
    wire inst : { rest : UInt<25>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:36]
    wire _inst_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:36]
    _inst_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:36]
    node _inst_T = bits(_inst_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:36]
    inst.opcode <= _inst_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:36]
    node _inst_T_1 = bits(_inst_WIRE, 31, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:36]
    inst.rest <= _inst_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 265:36]
    wire inst_I : { imm : UInt<12>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    wire _inst_I_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    _inst_I_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    node _inst_I_T = bits(_inst_I_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    inst_I.opcode <= _inst_I_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    node _inst_I_T_1 = bits(_inst_I_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    inst_I.rd <= _inst_I_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    node _inst_I_T_2 = bits(_inst_I_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    inst_I.func3 <= _inst_I_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    node _inst_I_T_3 = bits(_inst_I_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    inst_I.rs1 <= _inst_I_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    node _inst_I_T_4 = bits(_inst_I_WIRE, 31, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    inst_I.imm <= _inst_I_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 266:36]
    wire inst_R : { func7 : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    wire _inst_R_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    _inst_R_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    node _inst_R_T = bits(_inst_R_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    inst_R.opcode <= _inst_R_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    node _inst_R_T_1 = bits(_inst_R_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    inst_R.rd <= _inst_R_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    node _inst_R_T_2 = bits(_inst_R_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    inst_R.func3 <= _inst_R_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    node _inst_R_T_3 = bits(_inst_R_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    inst_R.rs1 <= _inst_R_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    node _inst_R_T_4 = bits(_inst_R_WIRE, 24, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    inst_R.rs2 <= _inst_R_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    node _inst_R_T_5 = bits(_inst_R_WIRE, 31, 25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    inst_R.func7 <= _inst_R_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 267:36]
    wire inst_U : { imm : UInt<20>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 268:36]
    wire _inst_U_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 268:36]
    _inst_U_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 268:36]
    node _inst_U_T = bits(_inst_U_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 268:36]
    inst_U.opcode <= _inst_U_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 268:36]
    node _inst_U_T_1 = bits(_inst_U_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 268:36]
    inst_U.rd <= _inst_U_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 268:36]
    node _inst_U_T_2 = bits(_inst_U_WIRE, 31, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 268:36]
    inst_U.imm <= _inst_U_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 268:36]
    wire inst_B : { imm12 : UInt<1>, imm10_5 : UInt<6>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, im41 : UInt<4>, im11 : UInt<1>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    wire _inst_B_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    _inst_B_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    node _inst_B_T = bits(_inst_B_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    inst_B.opcode <= _inst_B_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    node _inst_B_T_1 = bits(_inst_B_WIRE, 7, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    inst_B.im11 <= _inst_B_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    node _inst_B_T_2 = bits(_inst_B_WIRE, 11, 8) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    inst_B.im41 <= _inst_B_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    node _inst_B_T_3 = bits(_inst_B_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    inst_B.func3 <= _inst_B_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    node _inst_B_T_4 = bits(_inst_B_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    inst_B.rs1 <= _inst_B_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    node _inst_B_T_5 = bits(_inst_B_WIRE, 24, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    inst_B.rs2 <= _inst_B_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    node _inst_B_T_6 = bits(_inst_B_WIRE, 30, 25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    inst_B.imm10_5 <= _inst_B_T_6 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    node _inst_B_T_7 = bits(_inst_B_WIRE, 31, 31) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    inst_B.imm12 <= _inst_B_T_7 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 269:36]
    wire inst_J : { im20 : UInt<1>, im10_1 : UInt<10>, im11 : UInt<1>, im19_12 : UInt<8>, rd : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    wire _inst_J_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    _inst_J_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    node _inst_J_T = bits(_inst_J_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    inst_J.opcode <= _inst_J_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    node _inst_J_T_1 = bits(_inst_J_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    inst_J.rd <= _inst_J_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    node _inst_J_T_2 = bits(_inst_J_WIRE, 19, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    inst_J.im19_12 <= _inst_J_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    node _inst_J_T_3 = bits(_inst_J_WIRE, 20, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    inst_J.im11 <= _inst_J_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    node _inst_J_T_4 = bits(_inst_J_WIRE, 30, 21) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    inst_J.im10_1 <= _inst_J_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    node _inst_J_T_5 = bits(_inst_J_WIRE, 31, 31) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    inst_J.im20 <= _inst_J_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 270:36]
    wire inst_S : { im11_5 : UInt<7>, rs2 : UInt<5>, rs1 : UInt<5>, func3 : UInt<3>, im4 : UInt<5>, opcode : UInt<7>} @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    wire _inst_S_WIRE : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    _inst_S_WIRE <= instruction @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    node _inst_S_T = bits(_inst_S_WIRE, 6, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    inst_S.opcode <= _inst_S_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    node _inst_S_T_1 = bits(_inst_S_WIRE, 11, 7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    inst_S.im4 <= _inst_S_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    node _inst_S_T_2 = bits(_inst_S_WIRE, 14, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    inst_S.func3 <= _inst_S_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    node _inst_S_T_3 = bits(_inst_S_WIRE, 19, 15) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    inst_S.rs1 <= _inst_S_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    node _inst_S_T_4 = bits(_inst_S_WIRE, 24, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    inst_S.rs2 <= _inst_S_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    node _inst_S_T_5 = bits(_inst_S_WIRE, 31, 25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    inst_S.im11_5 <= _inst_S_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 271:36]
    wire sign : UInt<1> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 276:18]
    node _sign_T = bits(io.mIn, 31, 31) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 277:17]
    sign <= _sign_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 277:8]
    wire imm_I : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 279:20]
    node _imm_I_T = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 280:32]
    node _imm_I_T_1 = mux(sign, _imm_I_T, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 280:15]
    node _imm_I_T_2 = cat(_imm_I_T_1, inst_I.imm) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 280:52]
    imm_I <= _imm_I_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 280:9]
    wire imm_B : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 282:20]
    node _imm_B_T = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 283:32]
    node _imm_B_T_1 = mux(sign, _imm_B_T, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 283:15]
    node _imm_B_T_2 = cat(inst_B.im11, inst_B.imm10_5) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 283:68]
    node _imm_B_T_3 = cat(_imm_B_T_2, inst_B.im41) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 283:86]
    node _imm_B_T_4 = cat(_imm_B_T_3, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 283:101]
    node _imm_B_T_5 = cat(_imm_B_T_1, _imm_B_T_4) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 283:52]
    imm_B <= _imm_B_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 283:9]
    wire imm_U : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 285:20]
    node _imm_U_T = cat(inst_U.imm, UInt<12>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 286:23]
    imm_U <= _imm_U_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 286:9]
    wire imm_J : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 288:20]
    node _imm_J_T = bits(io.mIn, 31, 31) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:22]
    node _imm_J_T_1 = asUInt(asSInt(UInt<12>("hfff"))) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:39]
    node _imm_J_T_2 = mux(_imm_J_T, _imm_J_T_1, UInt<12>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:15]
    node _imm_J_T_3 = bits(io.mIn, 19, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:67]
    node _imm_J_T_4 = cat(_imm_J_T_2, _imm_J_T_3) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:58]
    node _imm_J_T_5 = bits(io.mIn, 20, 20) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:84]
    node _imm_J_T_6 = cat(_imm_J_T_4, _imm_J_T_5) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:75]
    node _imm_J_T_7 = bits(io.mIn, 30, 25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:98]
    node _imm_J_T_8 = cat(_imm_J_T_6, _imm_J_T_7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:89]
    node _imm_J_T_9 = bits(io.mIn, 24, 21) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:115]
    node _imm_J_T_10 = cat(_imm_J_T_8, _imm_J_T_9) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:106]
    node _imm_J_T_11 = cat(_imm_J_T_10, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:123]
    imm_J <= _imm_J_T_11 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 290:9]
    wire imm_S : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 293:20]
    node _imm_S_T = asUInt(asSInt(UInt<20>("hfffff"))) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 294:32]
    node _imm_S_T_1 = mux(sign, _imm_S_T, UInt<20>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 294:15]
    node _imm_S_T_2 = cat(_imm_S_T_1, inst_S.im11_5) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 294:52]
    node _imm_S_T_3 = cat(_imm_S_T_2, inst_S.im4) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 294:69]
    imm_S <= _imm_S_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 294:9]
    wire _op_WIRE : UInt<7> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 295:18]
    _op_WIRE <= inst.opcode @[\\src\\main\\scala\\gcd\\rv_cpu.scala 295:18]
    wire op : UInt<7> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 295:18]
    op <= _op_WIRE @[\\src\\main\\scala\\gcd\\rv_cpu.scala 295:18]
    wire memAddr : UInt<32> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 297:22]
    state_start <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 299:15]
    node _state_fetch_T = or(state_exec, state_start) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 300:30]
    state_fetch <= _state_fetch_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 300:15]
    state_decode <= state_fetch @[\\src\\main\\scala\\gcd\\rv_cpu.scala 302:16]
    node _state_exec_T = mux(must_halt, UInt<1>("h0"), state_decode) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 303:21]
    state_exec <= _state_exec_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 303:14]
    node _state_halt_T = or(must_halt, state_halt) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 304:26]
    state_halt <= _state_halt_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 304:14]
    io.halted <= state_halt @[\\src\\main\\scala\\gcd\\rv_cpu.scala 306:13]
    node _io_mWrite_T = and(state_exec, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 307:27]
    io.mWrite <= _io_mWrite_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 307:13]
    node _memAddr_T = or(state_fetch, state_start) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 309:31]
    node _memAddr_T_1 = mux(_memAddr_T, PC, alu.io.out) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 309:18]
    memAddr <= _memAddr_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 309:11]
    node _io_mAddr_T = shr(memAddr, 2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 311:23]
    io.mAddr <= _io_mAddr_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 311:12]
    io.mOut <= mshift.io.out @[\\src\\main\\scala\\gcd\\rv_cpu.scala 312:11]
    node _io_mMask_0_T = and(state_exec, writeMask[0]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 313:29]
    node _io_mMask_0_T_1 = and(_io_mMask_0_T, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 313:44]
    io.mMask[0] <= _io_mMask_0_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 313:15]
    node _io_mMask_1_T = and(state_exec, writeMask[1]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 314:29]
    node _io_mMask_1_T_1 = and(_io_mMask_1_T, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 314:44]
    io.mMask[1] <= _io_mMask_1_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 314:15]
    node _io_mMask_2_T = and(state_exec, writeMask[2]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 315:29]
    node _io_mMask_2_T_1 = and(_io_mMask_2_T, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 315:44]
    io.mMask[2] <= _io_mMask_2_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 315:15]
    node _io_mMask_3_T = and(state_exec, writeMask[3]) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 316:29]
    node _io_mMask_3_T_1 = and(_io_mMask_3_T, writeEnable) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 316:44]
    io.mMask[3] <= _io_mMask_3_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 316:15]
    io.halted <= state_halt @[\\src\\main\\scala\\gcd\\rv_cpu.scala 317:13]
    io.db_pc <= PC @[\\src\\main\\scala\\gcd\\rv_cpu.scala 319:12]
    io.db_r1 <= regs.io.outrs1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 320:12]
    io.db_r2 <= regs.io.outrs2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 321:12]
    alu.io.input1 <= regs.io.outrs1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 323:17]
    node _alu_io_input2_T = mux(alu2_use_reg, regs.io.outrs2, immv) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 324:23]
    alu.io.input2 <= _alu_io_input2_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 324:17]
    alu.io.func3 <= aluOP @[\\src\\main\\scala\\gcd\\rv_cpu.scala 325:16]
    node _regs_io_din_T = mux(din_is_alu, alu.io.out, lui_mix) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 327:39]
    node _regs_io_din_T_1 = mux(storePC, PC4, _regs_io_din_T) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 327:21]
    regs.io.din <= _regs_io_din_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 327:15]
    regs.io.rs1 <= rs1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 329:15]
    regs.io.rs2 <= rs2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 330:15]
    node _regs_io_rsd_T = eq(din_is_mem, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 331:37]
    node _regs_io_rsd_T_1 = and(state_exec, _regs_io_rsd_T) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 331:35]
    node _regs_io_rsd_T_2 = and(state_fetch, din_is_mem) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 331:65]
    node _regs_io_rsd_T_3 = or(_regs_io_rsd_T_1, _regs_io_rsd_T_2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 331:50]
    node _regs_io_rsd_T_4 = mux(_regs_io_rsd_T_3, rd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 331:21]
    regs.io.rsd <= _regs_io_rsd_T_4 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 331:15]
    node _lui_mix_T = bits(immv, 31, 12) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 333:44]
    node _lui_mix_T_1 = bits(regs.io.outrs1, 11, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 333:69]
    node _lui_mix_T_2 = cat(_lui_mix_T, _lui_mix_T_1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 333:52]
    node _lui_mix_T_3 = mux(din_is_mem, io.mIn, _lui_mix_T_2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 333:17]
    lui_mix <= _lui_mix_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 333:11]
    must_halt <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 334:13]
    node _branch_target_T = add(PC, alu.io.out) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 338:69]
    node _branch_target_T_1 = tail(_branch_target_T, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 338:69]
    node _branch_target_T_2 = add(PC, immv) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 338:85]
    node _branch_target_T_3 = tail(_branch_target_T_2, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 338:85]
    node _branch_target_T_4 = mux(jumpEnable, _branch_target_T_1, _branch_target_T_3) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 338:53]
    node _branch_target_T_5 = mux(absjumpEnable, alu.io.out, _branch_target_T_4) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 338:23]
    branch_target <= _branch_target_T_5 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 338:17]
    node alu_eq = eq(regs.io.outrs1, regs.io.outrs2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 340:31]
    node alu_lt = lt(regs.io.outrs1, regs.io.outrs2) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 341:31]
    alu2_use_reg <= alu2_use_reg @[\\src\\main\\scala\\gcd\\rv_cpu.scala 343:16]
    mshift.io.in <= regs.io.outrs2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 345:16]
    node _mshift_io_shift_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 346:29]
    mshift.io.shift <= _mshift_io_shift_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 346:19]
    writeMask[0] <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 348:16]
    writeMask[1] <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 349:16]
    writeMask[2] <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 350:16]
    writeMask[3] <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 351:16]
    node _T = eq(UInt<1>("h0"), inst_R.func3) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:24]
    when _T : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:24]
      node _writeMask_0_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 354:30]
      node _writeMask_0_T_1 = eq(_writeMask_0_T, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 354:36]
      writeMask[0] <= _writeMask_0_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 354:20]
      node _writeMask_1_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 355:30]
      node _writeMask_1_T_1 = eq(_writeMask_1_T, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 355:36]
      writeMask[1] <= _writeMask_1_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 355:20]
      node _writeMask_2_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 356:30]
      node _writeMask_2_T_1 = eq(_writeMask_2_T, UInt<2>("h2")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 356:36]
      writeMask[2] <= _writeMask_2_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 356:20]
      node _writeMask_3_T = bits(memAddr, 1, 0) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 357:30]
      node _writeMask_3_T_1 = eq(_writeMask_3_T, UInt<2>("h3")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 357:36]
      writeMask[3] <= _writeMask_3_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 357:20]
    else :
      node _T_1 = eq(UInt<1>("h1"), inst_R.func3) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:24]
      when _T_1 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:24]
        node _writeMask_0_T_2 = bits(memAddr, 1, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 360:30]
        node _writeMask_0_T_3 = eq(_writeMask_0_T_2, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 360:34]
        writeMask[0] <= _writeMask_0_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 360:20]
        node _writeMask_1_T_2 = bits(memAddr, 1, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 361:30]
        node _writeMask_1_T_3 = eq(_writeMask_1_T_2, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 361:34]
        writeMask[1] <= _writeMask_1_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 361:20]
        node _writeMask_2_T_2 = bits(memAddr, 1, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 362:30]
        node _writeMask_2_T_3 = eq(_writeMask_2_T_2, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 362:34]
        writeMask[2] <= _writeMask_2_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 362:20]
        node _writeMask_3_T_2 = bits(memAddr, 1, 1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 363:30]
        node _writeMask_3_T_3 = eq(_writeMask_3_T_2, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 363:34]
        writeMask[3] <= _writeMask_3_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 363:20]
      else :
        node _T_2 = eq(UInt<2>("h2"), inst_R.func3) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:24]
        when _T_2 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 352:24]
          writeMask[0] <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 366:20]
          writeMask[1] <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 367:20]
          writeMask[2] <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 368:20]
          writeMask[3] <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 369:20]
    din_is_alu <= din_is_alu @[\\src\\main\\scala\\gcd\\rv_cpu.scala 373:14]
    when state_decode : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 374:21]
      rs2 <= inst_R.rs2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 375:9]
      rs1 <= inst_R.rs1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 376:9]
      rd <= inst_R.rd @[\\src\\main\\scala\\gcd\\rv_cpu.scala 377:8]
      savedOp <= io.mIn @[\\src\\main\\scala\\gcd\\rv_cpu.scala 379:13]
      aluOP <= inst_R.func3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 380:11]
      branchOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 381:14]
      memOP <= inst_R.func3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 382:11]
      must_halt <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 383:15]
      branchEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 384:18]
      jumpEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 385:16]
      immv <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 386:10]
      din_is_mem <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 388:16]
      node _din_is_alu_T = eq(op, UInt<6>("h37")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 389:26]
      node _din_is_alu_T_1 = eq(op, UInt<2>("h3")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 389:46]
      node _din_is_alu_T_2 = or(_din_is_alu_T, _din_is_alu_T_1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 389:41]
      node _din_is_alu_T_3 = mux(_din_is_alu_T_2, UInt<1>("h0"), UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 389:22]
      din_is_alu <= _din_is_alu_T_3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 389:16]
      alu2_use_reg <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 390:18]
      writeEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 391:17]
      storePC <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 392:13]
      absjumpEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 394:19]
      node _T_3 = asUInt(UInt<5>("h13")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
      node _T_4 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
      node _T_5 = eq(_T_3, _T_4) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
      when _T_5 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
        immv <= imm_I @[\\src\\main\\scala\\gcd\\rv_cpu.scala 398:14]
        alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 399:22]
      else :
        node _T_6 = asUInt(UInt<7>("h63")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
        node _T_7 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
        node _T_8 = eq(_T_6, _T_7) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
        when _T_8 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
          aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 402:15]
          branchOP <= inst_R.func3 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 403:18]
          branchEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 404:22]
          immv <= imm_B @[\\src\\main\\scala\\gcd\\rv_cpu.scala 405:14]
          alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 406:22]
        else :
          node _T_9 = asUInt(UInt<6>("h37")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
          node _T_10 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
          node _T_11 = eq(_T_9, _T_10) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
          when _T_11 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
            immv <= imm_U @[\\src\\main\\scala\\gcd\\rv_cpu.scala 409:14]
            rs1 <= inst_R.rd @[\\src\\main\\scala\\gcd\\rv_cpu.scala 410:13]
          else :
            node _T_12 = asUInt(UInt<7>("h6f")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
            node _T_13 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
            node _T_14 = eq(_T_12, _T_13) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
            when _T_14 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
              aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 414:15]
              branchEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 415:22]
              jumpEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 416:20]
              rs1 <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 417:13]
              immv <= imm_J @[\\src\\main\\scala\\gcd\\rv_cpu.scala 418:14]
              alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 419:22]
              storePC <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 420:17]
            else :
              node _T_15 = asUInt(UInt<7>("h67")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
              node _T_16 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
              node _T_17 = eq(_T_15, _T_16) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
              when _T_17 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                absjumpEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 423:23]
                aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 424:15]
                branchEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 425:22]
                jumpEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 426:20]
                immv <= imm_I @[\\src\\main\\scala\\gcd\\rv_cpu.scala 427:14]
                alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 428:22]
                storePC <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 429:17]
              else :
                node _T_18 = asUInt(UInt<2>("h3")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                node _T_19 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                node _T_20 = eq(_T_18, _T_19) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                when _T_20 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                  din_is_mem <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 432:20]
                  aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 434:15]
                  branchEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 435:22]
                  immv <= imm_I @[\\src\\main\\scala\\gcd\\rv_cpu.scala 436:14]
                  alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 437:22]
                else :
                  node _T_21 = asUInt(UInt<6>("h23")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                  node _T_22 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                  node _T_23 = eq(_T_21, _T_22) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                  when _T_23 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                    rd <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 440:12]
                    aluOP <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 442:15]
                    branchEnable <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 443:22]
                    immv <= imm_S @[\\src\\main\\scala\\gcd\\rv_cpu.scala 444:14]
                    alu2_use_reg <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 445:22]
                    writeEnable <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 446:21]
                  else :
                    node _T_24 = asUInt(UInt<7>("h73")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                    node _T_25 = asUInt(op) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                    node _T_26 = eq(_T_24, _T_25) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                    when _T_26 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 395:16]
                      rs2 <= UInt<2>("h2") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 449:13]
                      rs1 <= UInt<1>("h1") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 450:13]
                      node _must_halt_T = eq(inst_I.imm, UInt<1>("h1")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 451:34]
                      node _must_halt_T_1 = eq(inst_I.rd, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 451:57]
                      node _must_halt_T_2 = and(_must_halt_T, _must_halt_T_1) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 451:43]
                      node _must_halt_T_3 = eq(inst_I.rs1, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 451:82]
                      node _must_halt_T_4 = and(_must_halt_T_2, _must_halt_T_3) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 451:67]
                      node _must_halt_T_5 = eq(inst_I.func3, UInt<1>("h0")) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 451:108]
                      node _must_halt_T_6 = and(_must_halt_T_4, _must_halt_T_5) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 451:91]
                      must_halt <= _must_halt_T_6 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 451:19]
    wire branchCheck : UInt<1> @[\\src\\main\\scala\\gcd\\rv_cpu.scala 458:25]
    branchCheck <= UInt<1>("h0") @[\\src\\main\\scala\\gcd\\rv_cpu.scala 459:15]
    node _T_27 = eq(UInt<1>("h0"), branchOP) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
    when _T_27 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
      branchCheck <= alu_eq @[\\src\\main\\scala\\gcd\\rv_cpu.scala 462:19]
    else :
      node _T_28 = eq(UInt<1>("h1"), branchOP) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
      when _T_28 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
        node _branchCheck_T = not(alu_eq) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 465:22]
        branchCheck <= _branchCheck_T @[\\src\\main\\scala\\gcd\\rv_cpu.scala 465:19]
      else :
        node _T_29 = eq(UInt<3>("h4"), branchOP) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
        when _T_29 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
          branchCheck <= alu_lt @[\\src\\main\\scala\\gcd\\rv_cpu.scala 471:19]
        else :
          node _T_30 = eq(UInt<3>("h5"), branchOP) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
          when _T_30 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
            node _branchCheck_T_1 = not(alu_lt) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 474:22]
            branchCheck <= _branchCheck_T_1 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 474:19]
          else :
            node _T_31 = eq(UInt<3>("h6"), branchOP) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
            when _T_31 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
              branchCheck <= alu_lt @[\\src\\main\\scala\\gcd\\rv_cpu.scala 477:19]
            else :
              node _T_32 = eq(UInt<3>("h7"), branchOP) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
              when _T_32 : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 460:20]
                node _branchCheck_T_2 = not(alu_lt) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 480:22]
                branchCheck <= _branchCheck_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 480:19]
    when state_exec : @[\\src\\main\\scala\\gcd\\rv_cpu.scala 484:19]
      node _PC_T = and(branchEnable, branchCheck) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 486:43]
      node _PC_T_1 = or(jumpEnable, _PC_T) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 486:27]
      node _PC_T_2 = mux(_PC_T_1, branch_target, PC4) @[\\src\\main\\scala\\gcd\\rv_cpu.scala 486:14]
      PC <= _PC_T_2 @[\\src\\main\\scala\\gcd\\rv_cpu.scala 486:8]


